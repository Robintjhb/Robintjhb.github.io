[{"__type__":"cc.SpriteFrame","content":{"name":"ID_163","rect":{"x":0,"y":0,"width":1024,"height":1024},"offset":{"x":0,"y":0},"originalSize":{"width":1024,"height":1024},"rotated":false,"capInsets":[0,0,0,0],"texture":"0bLqDG8Q1Fn5uPPg5kUIFA@6c48a"}},{"__type__":"cc.AnimationClip","_name":"soldiers","wrapMode":2,"_duration":1.3166666666666667,"_keys":[[0.13333333333333333,0.3,0.4666666666666667,0.6333333333333333,0.8,0.9666666666666667,1.1333333333333333,1.3]],"_curves":[{"modifiers":[{"__type__":"cc.animation.ComponentPath","component":"cc.SpriteComponent"},"spriteFrame"],"data":{"keys":0,"values":[{"__uuid__":"45p6t9kFJPq7Ilv469TQNI@25e08"},{"__uuid__":"45p6t9kFJPq7Ilv469TQNI@a1b82"},{"__uuid__":"45p6t9kFJPq7Ilv469TQNI@47586"},{"__uuid__":"45p6t9kFJPq7Ilv469TQNI@184b3"},{"__uuid__":"45p6t9kFJPq7Ilv469TQNI@6a694"},{"__uuid__":"45p6t9kFJPq7Ilv469TQNI@7c260"},{"__uuid__":"45p6t9kFJPq7Ilv469TQNI@7ee6c"},{"__uuid__":"45p6t9kFJPq7Ilv469TQNI@1bcd2"}],"easingMethods":{}}}],"_hash":564091863},{"__type__":"cc.EffectAsset","_name":"builtin-standard","techniques":[{"name":"opaque","passes":[{"program":"builtin-standard|standard-vs:vert|standard-fs:frag","properties":{"tilingOffset":{"value":[1,1,0,0],"type":16},"mainColor":{"value":[1,1,1,1],"type":16,"handleInfo":["albedo",0,16]},"albedoScale":{"value":[1,1,1],"type":15,"handleInfo":["albedoScaleAndCutoff",0,15]},"alphaThreshold":{"value":[0.5],"type":13,"handleInfo":["albedoScaleAndCutoff",3,13]},"occlusion":{"value":[1],"type":13,"handleInfo":["pbrParams",0,13]},"roughness":{"value":[0.8],"type":13,"handleInfo":["pbrParams",1,13]},"metallic":{"value":[0.6],"type":13,"handleInfo":["pbrParams",2,13]},"normalStrenth":{"value":[1],"type":13,"handleInfo":["pbrParams",3,13]},"emissive":{"value":[0,0,0,1],"type":16},"emissiveScale":{"value":[1,1,1],"type":15,"handleInfo":["emissiveScaleParam",0,15]},"mainTexture":{"value":"grey","type":28,"handleInfo":["albedoMap",0,28]},"normalMap":{"value":"normal","type":28},"pbrMap":{"value":"grey","type":28},"metallicRoughnessMap":{"value":"grey","type":28},"occlusionMap":{"value":"white","type":28},"emissiveMap":{"value":"grey","type":28},"albedo":{"type":16,"value":[1,1,1,1]},"albedoScaleAndCutoff":{"type":16,"value":[1,1,1,0.5]},"pbrParams":{"type":16,"value":[1,0.8,0.6,1]},"emissiveScaleParam":{"type":16,"value":[1,1,1,0]},"albedoMap":{"type":28,"value":"grey"}}}]},{"name":"transparent","passes":[{"blendState":{"targets":[{"blend":true,"blendSrc":2,"blendDst":4,"blendDstAlpha":4}]},"program":"builtin-standard|standard-vs:vert|standard-fs:frag","depthStencilState":{"depthTest":true,"depthWrite":false},"properties":{"tilingOffset":{"value":[1,1,0,0],"type":16},"mainColor":{"value":[1,1,1,1],"type":16,"handleInfo":["albedo",0,16]},"albedoScale":{"value":[1,1,1],"type":15,"handleInfo":["albedoScaleAndCutoff",0,15]},"alphaThreshold":{"value":[0.5],"type":13,"handleInfo":["albedoScaleAndCutoff",3,13]},"occlusion":{"value":[1],"type":13,"handleInfo":["pbrParams",0,13]},"roughness":{"value":[0.8],"type":13,"handleInfo":["pbrParams",1,13]},"metallic":{"value":[0.6],"type":13,"handleInfo":["pbrParams",2,13]},"normalStrenth":{"value":[1],"type":13,"handleInfo":["pbrParams",3,13]},"emissive":{"value":[0,0,0,1],"type":16},"emissiveScale":{"value":[1,1,1],"type":15,"handleInfo":["emissiveScaleParam",0,15]},"mainTexture":{"value":"grey","type":28,"handleInfo":["albedoMap",0,28]},"normalMap":{"value":"normal","type":28},"pbrMap":{"value":"grey","type":28},"metallicRoughnessMap":{"value":"grey","type":28},"occlusionMap":{"value":"white","type":28},"emissiveMap":{"value":"grey","type":28},"albedo":{"type":16,"value":[1,1,1,1]},"albedoScaleAndCutoff":{"type":16,"value":[1,1,1,0.5]},"pbrParams":{"type":16,"value":[1,0.8,0.6,1]},"emissiveScaleParam":{"type":16,"value":[1,1,1,0]},"albedoMap":{"type":28,"value":"grey"}}}]}],"shaders":[{"hash":3284921961,"glsl3":{"vert":"\nprecision highp float;\nstruct StandardVertInput {\n  highp vec4 position;\n  vec3 normal;\n  vec4 tangent;\n};\nin vec3 a_position;\nin vec3 a_normal;\nin vec4 a_tangent;\n#if CC_USE_MORPH\n    in float a_vertexId;\n    int getVertexId() {\n        return int(a_vertexId);\n    }\nuniform CCMorph {\n    vec4 cc_displacementWeights[15];\n    vec4 cc_displacementTextureInfo;\n};\n    vec4 fetchFlatPixel(sampler2D tex, int pixelIndex) {\n        float pixelIndexF = float(pixelIndex);\n        vec2 textureResolution = vec2(float(cc_displacementTextureInfo.x), float(cc_displacementTextureInfo.y));\n        float pixelX = mod(pixelIndexF, textureResolution.x);\n        float pixelY = floor(pixelIndexF / textureResolution.x);\n        vec2 uv = (vec2(pixelX, pixelY) + .5) / textureResolution;\n        return texture(tex, uv);\n    }\nfloat getDisplacementWeight(int index) {\n    float m = mod(float(index), 4.0);\n    if (m < 1.0) {\n        return cc_displacementWeights[index / 4].x;\n    } else if (m < 2.0) {\n        return cc_displacementWeights[index / 4].y;\n    } else if (m < 3.0) {\n        return cc_displacementWeights[index / 4].z;\n    } else {\n        return cc_displacementWeights[index / 4].w;\n    }\n}\nvec3 getVec3DisplacementFromTexture(sampler2D tex, int vertexIndex) {\n#if CC_MORPH_PRECOMPUTED\n    return fetchFlatPixel(tex, vertexIndex).rgb;\n#else\n    vec3 result = vec3(0, 0, 0);\n    for (int iTarget = 0; iTarget < CC_MORPH_TARGET_COUNT; ++iTarget) {\n        int dataPixelStart = int(fetchFlatPixel(tex, iTarget).r);\n        result += (fetchFlatPixel(tex, dataPixelStart + vertexIndex).rgb * getDisplacementWeight(iTarget));\n    }\n    return result;\n#endif\n}\n#if CC_MORPH_TARGET_HAS_POSITION\n    uniform sampler2D cc_PositionDisplacements;\n    vec3 getPositionDisplacement(int vertexId) {\n        return getVec3DisplacementFromTexture(cc_PositionDisplacements, vertexId);\n    }\n#endif\n#if CC_MORPH_TARGET_HAS_NORMAL\n    uniform sampler2D cc_NormalDisplacements;\n    vec3 getNormalDisplacement(int vertexId) {\n        return getVec3DisplacementFromTexture(cc_NormalDisplacements, vertexId);\n    }\n#endif\n#if CC_MORPH_TARGET_HAS_TANGENT\n    uniform sampler2D cc_TangentDisplacements;\n    vec3 getTangentDisplacement(int vertexId) {\n        return getVec3DisplacementFromTexture(cc_TangentDisplacements, vertexId);\n    }\n#endif\nvoid applyMorph (inout StandardVertInput attr) {\n    int vertexId = getVertexId();\n#if CC_MORPH_TARGET_HAS_POSITION\n    attr.position.xyz = attr.position.xyz + getPositionDisplacement(vertexId);\n#endif\n#if CC_MORPH_TARGET_HAS_NORMAL\n    attr.normal.xyz = attr.normal.xyz + getNormalDisplacement(vertexId);\n#endif\n#if CC_MORPH_TARGET_HAS_TANGENT\n    attr.tangent.xyz = attr.tangent.xyz + getTangentDisplacement(vertexId);\n#endif\n}\nvoid applyMorph (inout vec4 position) {\n#if CC_MORPH_TARGET_HAS_POSITION\n    position.xyz = position.xyz + getPositionDisplacement(getVertexId());\n#endif\n}\n#endif\n#if CC_USE_SKINNING\nin vec4 a_weights;\nin vec4 a_joints;\n#if CC_USE_BAKED_ANIMATION\n  #if USE_INSTANCING\n    in highp vec4 a_jointAnimInfo;\n  #endif\n  uniform CCSkinningTexture {\n    highp vec4 cc_jointTextureInfo;\n  };\n  uniform CCSkinningAnimation {\n    highp vec4 cc_jointAnimInfo;\n  };\n  uniform sampler2D cc_jointTexture;\n    #if !CC_SUPPORT_FLOAT_TEXTURE\n    highp float decode32 (highp vec4 rgba) {\n      rgba = rgba * 255.0;\n      highp float Sign = 1.0 - step(128.0, rgba[3]) * 2.0;\n      highp float Exponent = 2.0 * mod(rgba[3], 128.0) + step(128.0, rgba[2]) - 127.0;\n      highp float Mantissa = mod(rgba[2], 128.0) * 65536.0 + rgba[1] * 256.0 + rgba[0] + 8388608.0;\n      return Sign * exp2(Exponent - 23.0) * Mantissa;\n    }\n  #endif\n#else\n  uniform CCSkinning {\n    highp vec4 cc_joints[30 * 3];\n  };\n#endif\n#if CC_USE_BAKED_ANIMATION\n  #if CC_SUPPORT_FLOAT_TEXTURE\n    mat4 getJointMatrix (float i) {\n    #if USE_INSTANCING\n      highp float j = 3.0 * (a_jointAnimInfo.x * a_jointAnimInfo.y + i) + a_jointAnimInfo.z;\n    #else\n      highp float j = 3.0 * (cc_jointAnimInfo.x * cc_jointTextureInfo.y + i) + cc_jointTextureInfo.z;\n    #endif\n    highp float invSize = cc_jointTextureInfo.w;\n    highp float y = floor(j * invSize);\n    highp float x = j - y * cc_jointTextureInfo.x;\n    y = (y + 0.5) * invSize;\n      vec4 v1 = texture(cc_jointTexture, vec2((x + 0.5) * invSize, y));\n      vec4 v2 = texture(cc_jointTexture, vec2((x + 1.5) * invSize, y));\n      vec4 v3 = texture(cc_jointTexture, vec2((x + 2.5) * invSize, y));\n      return mat4(vec4(v1.xyz, 0.0), vec4(v2.xyz, 0.0), vec4(v3.xyz, 0.0), vec4(v1.w, v2.w, v3.w, 1.0));\n    }\n  #else\n    mat4 getJointMatrix (float i) {\n    #if USE_INSTANCING\n      highp float j = 12.0 * (a_jointAnimInfo.x * a_jointAnimInfo.y + i) + a_jointAnimInfo.z;\n    #else\n      highp float j = 12.0 * (cc_jointAnimInfo.x * cc_jointTextureInfo.y + i) + cc_jointTextureInfo.z;\n    #endif\n    highp float invSize = cc_jointTextureInfo.w;\n    highp float y = floor(j * invSize);\n    highp float x = j - y * cc_jointTextureInfo.x;\n    y = (y + 0.5) * invSize;\n      vec4 v1 = vec4(\n        decode32(texture(cc_jointTexture, vec2((x + 0.5) * invSize, y))),\n        decode32(texture(cc_jointTexture, vec2((x + 1.5) * invSize, y))),\n        decode32(texture(cc_jointTexture, vec2((x + 2.5) * invSize, y))),\n        decode32(texture(cc_jointTexture, vec2((x + 3.5) * invSize, y)))\n      );\n      vec4 v2 = vec4(\n        decode32(texture(cc_jointTexture, vec2((x + 4.5) * invSize, y))),\n        decode32(texture(cc_jointTexture, vec2((x + 5.5) * invSize, y))),\n        decode32(texture(cc_jointTexture, vec2((x + 6.5) * invSize, y))),\n        decode32(texture(cc_jointTexture, vec2((x + 7.5) * invSize, y)))\n      );\n      vec4 v3 = vec4(\n        decode32(texture(cc_jointTexture, vec2((x + 8.5) * invSize, y))),\n        decode32(texture(cc_jointTexture, vec2((x + 9.5) * invSize, y))),\n        decode32(texture(cc_jointTexture, vec2((x + 10.5) * invSize, y))),\n        decode32(texture(cc_jointTexture, vec2((x + 11.5) * invSize, y)))\n      );\n      return mat4(vec4(v1.xyz, 0.0), vec4(v2.xyz, 0.0), vec4(v3.xyz, 0.0), vec4(v1.w, v2.w, v3.w, 1.0));\n    }\n  #endif\n#else\n  mat4 getJointMatrix (float i) {\n    int idx = int(i);\n    vec4 v1 = cc_joints[idx * 3];\n    vec4 v2 = cc_joints[idx * 3 + 1];\n    vec4 v3 = cc_joints[idx * 3 + 2];\n    return mat4(vec4(v1.xyz, 0.0), vec4(v2.xyz, 0.0), vec4(v3.xyz, 0.0), vec4(v1.w, v2.w, v3.w, 1.0));\n  }\n#endif\nmat4 skinMatrix () {\n  return getJointMatrix(a_joints.x) * a_weights.x\n       + getJointMatrix(a_joints.y) * a_weights.y\n       + getJointMatrix(a_joints.z) * a_weights.z\n       + getJointMatrix(a_joints.w) * a_weights.w;\n}\nvoid CCSkin (inout vec4 position) {\n  mat4 m = skinMatrix();\n  position = m * position;\n}\nvoid CCSkin (inout StandardVertInput attr) {\n  mat4 m = skinMatrix();\n  attr.position = m * attr.position;\n  attr.normal = (m * vec4(attr.normal, 0.0)).xyz;\n  attr.tangent.xyz = (m * vec4(attr.tangent.xyz, 0.0)).xyz;\n}\n#endif\nuniform CCGlobal {\n  highp   vec4 cc_time;\n  mediump vec4 cc_screenSize;\n  mediump vec4 cc_screenScale;\n  mediump vec4 cc_nativeSize;\n  highp   mat4 cc_matView;\n  highp   mat4 cc_matViewInv;\n  highp   mat4 cc_matProj;\n  highp   mat4 cc_matProjInv;\n  highp   mat4 cc_matViewProj;\n  highp   mat4 cc_matViewProjInv;\n  highp   vec4 cc_cameraPos;\n  mediump vec4 cc_exposure;\n  mediump vec4 cc_mainLitDir;\n  mediump vec4 cc_mainLitColor;\n  mediump vec4 cc_ambientSky;\n  mediump vec4 cc_ambientGround;\n};\n#if USE_INSTANCING\n  in vec4 a_matWorld0;\n  in vec4 a_matWorld1;\n  in vec4 a_matWorld2;\n#elif USE_BATCHING\n  in float a_dyn_batch_id;\n  uniform CCLocalBatched {\n    highp mat4 cc_matWorlds[10];\n  };\n#else\nuniform CCLocal {\n  highp mat4 cc_matWorld;\n  highp mat4 cc_matWorldIT;\n  highp vec4 cc_lightingMapUVParam;\n};\n#endif\nuniform Constants {\n  vec4 tilingOffset;\n  vec4 albedo;\n  vec4 albedoScaleAndCutoff;\n  vec4 pbrParams;\n  vec4 emissive;\n  vec4 emissiveScaleParam;\n};\n#if USE_VERTEX_COLOR\n  in vec3 a_color;\n  out vec3 v_color;\n#endif\nout vec3 v_position;\nout vec3 v_normal;\n#if USE_NORMAL_MAP\n  out vec3 v_tangent;\n  out vec3 v_bitangent;\n#endif\nin vec2 a_texCoord;\nout vec2 v_uv;\nin vec2 a_texCoord1;\nout vec2 v_uv1;\n#if USE_LIGHTMAP && !USE_BATCHING && !USE_INSTANCING\n  out vec2 v_luv;\n#endif\nvec4 vert () {\n  StandardVertInput In;\n  In.position = vec4(a_position, 1.0);\n  In.normal = a_normal;\n  In.tangent = a_tangent;\n  #if CC_USE_MORPH\n    applyMorph(In);\n  #endif\n  #if CC_USE_SKINNING\n    CCSkin(In);\n  #endif\n  mat4 matWorld, matWorldIT;\n  #if USE_INSTANCING\n    matWorld = mat4(\n      vec4(a_matWorld0.xyz, 0.0),\n      vec4(a_matWorld1.xyz, 0.0),\n      vec4(a_matWorld2.xyz, 0.0),\n      vec4(a_matWorld0.w, a_matWorld1.w, a_matWorld2.w, 1.0)\n    );\n    matWorldIT = matWorld;\n  #elif USE_BATCHING\n    matWorld = cc_matWorlds[int(a_dyn_batch_id)];\n    matWorldIT = matWorld;\n  #else\n    matWorld = cc_matWorld;\n    matWorldIT = cc_matWorldIT;\n  #endif\n  vec4 pos = matWorld * In.position;\n  v_position = pos.xyz;\n  v_normal = normalize((matWorldIT * vec4(In.normal, 0.0)).xyz);\n  #if USE_NORMAL_MAP\n    v_tangent = normalize((matWorld * vec4(In.tangent.xyz, 0.0)).xyz);\n    v_bitangent = cross(v_normal, v_tangent) * In.tangent.w;\n  #endif\n  v_uv = a_texCoord * tilingOffset.xy + tilingOffset.zw;\n  #if HAS_SECOND_UV\n    v_uv1 = a_texCoord1 * tilingOffset.xy + tilingOffset.zw;\n  #endif\n  #if USE_VERTEX_COLOR\n    v_color = a_color;\n  #endif\n  #if USE_LIGHTMAP && HAS_SECOND_UV && !USE_BATCHING && !USE_INSTANCING\n    v_luv = cc_lightingMapUVParam.xy + a_texCoord1 * cc_lightingMapUVParam.zw;\n  #endif\n  return cc_matProj * (cc_matView * matWorld) * In.position;\n}\nvoid main() { gl_Position = vert(); }","frag":"\nprecision highp float;\nuniform CCGlobal {\n  highp   vec4 cc_time;\n  mediump vec4 cc_screenSize;\n  mediump vec4 cc_screenScale;\n  mediump vec4 cc_nativeSize;\n  highp   mat4 cc_matView;\n  highp   mat4 cc_matViewInv;\n  highp   mat4 cc_matProj;\n  highp   mat4 cc_matProjInv;\n  highp   mat4 cc_matViewProj;\n  highp   mat4 cc_matViewProjInv;\n  highp   vec4 cc_cameraPos;\n  mediump vec4 cc_exposure;\n  mediump vec4 cc_mainLitDir;\n  mediump vec4 cc_mainLitColor;\n  mediump vec4 cc_ambientSky;\n  mediump vec4 cc_ambientGround;\n};\n#if CC_USE_IBL\nuniform samplerCube cc_environment;\nvec3 unpackRGBE (vec4 rgbe) {\n  return rgbe.rgb * pow(2.0, rgbe.a * 255.0 - 128.0);\n}\nvec4 fragTextureLod (sampler2D tex, vec2 coord, float lod) {\n    return textureLod(tex, coord, lod);\n}\nvec4 fragTextureLod (samplerCube tex, vec3 coord, float lod) {\n    return textureLod(tex, coord, lod);\n}\n#endif\nvec3 SRGBToLinear (vec3 gamma) {\n  return gamma * gamma;\n}\nuniform CCForwardLight {\n  highp vec4 cc_sphereLitPos[2];\n  vec4 cc_sphereLitSizeRange[2];\n  vec4 cc_sphereLitColor[2];\n  highp vec4 cc_spotLitPos[2];\n  vec4 cc_spotLitSizeRangeAngle[2];\n  vec4 cc_spotLitDir[2];\n  vec4 cc_spotLitColor[2];\n};\nfloat SmoothDistAtt (float distSqr, float invSqrAttRadius) {\n  float factor = distSqr * invSqrAttRadius;\n  float smoothFactor = clamp(1.0 - factor * factor, 0.0, 1.0);\n  return smoothFactor * smoothFactor;\n}\nfloat GetDistAtt (float distSqr, float invSqrAttRadius) {\n  float attenuation = 1.0 / max(distSqr, 0.01*0.01);\n  attenuation *= SmoothDistAtt(distSqr , invSqrAttRadius);\n  return attenuation;\n}\nfloat GetAngleAtt (vec3 L, vec3 litDir, float litAngleScale, float litAngleOffset) {\n  float cd = dot(litDir, L);\n  float attenuation = clamp(cd * litAngleScale + litAngleOffset, 0.0, 1.0);\n  return (attenuation * attenuation);\n}\nfloat GGXMobile (float roughness, float NoH, vec3 H, vec3 N) {\n  vec3 NxH = cross(N, H);\n  float OneMinusNoHSqr = dot(NxH, NxH);\n  float a = roughness * roughness;\n  float n = NoH * a;\n  float p = a / (OneMinusNoHSqr + n * n);\n  return p * p;\n}\nfloat CalcSpecular (float roughness, float NoH, vec3 H, vec3 N) {\n  return (roughness*0.25 + 0.25) * GGXMobile(roughness, NoH, H, N);\n}\nvec3 BRDFApprox (vec3 specular, float roughness, float NoV) {\n  const vec4 c0 = vec4(-1.0, -0.0275, -0.572, 0.022);\n  const vec4 c1 = vec4(1.0, 0.0425, 1.04, -0.04);\n  vec4 r = roughness * c0 + c1;\n  float a004 = min( r.x * r.x, exp2( -9.28 * NoV ) ) * r.x + r.y;\n  vec2 AB = vec2( -1.04, 1.04 ) * a004 + r.zw;\n  AB.y *= clamp(50.0 * specular.g, 0.0, 1.0);\n  return specular * AB.x + AB.y;\n}\nvec3 CalcDynamicLighting (vec3 worldPos, vec3 N, vec3 V, vec3 diffuse, vec3 specular, float roughness) {\n  vec3 lighting = vec3(0.0);\n  vec3 diffuseContrib = diffuse / 3.14159265359;\n  for (int i = 0; i < 2; i++) {\n    vec3 PLU = cc_sphereLitPos[i].xyz - worldPos;\n    vec3 PL = normalize(PLU);\n    vec3 PH = normalize(PL + V);\n    float PNL = max(dot(N, PL), 0.001);\n    float PNH = max(dot(N, PH), 0.0);\n    float distSqr = dot(PLU, PLU);\n    float litRadius = cc_sphereLitSizeRange[i].x;\n    float litRadiusSqr = litRadius * litRadius;\n    float illum = 3.14159265359 * (litRadiusSqr / max(litRadiusSqr , distSqr));\n    float attRadiusSqrInv = 1.0 / max(cc_sphereLitSizeRange[i].y, 0.01);\n    attRadiusSqrInv *= attRadiusSqrInv;\n    float att = GetDistAtt(distSqr, attRadiusSqrInv);\n    vec3 lspec = specular * CalcSpecular(roughness, PNH, PH, N);\n    lighting += PNL * cc_sphereLitColor[i].rgb * cc_sphereLitColor[i].w * illum * att * (diffuseContrib + lspec);\n  }\n  for (int i = 0; i < 2; i++) {\n    vec3 SLU = cc_spotLitPos[i].xyz - worldPos;\n    vec3 SL = normalize(SLU);\n    vec3 SH = normalize(SL + V);\n    float SNL = max(dot(N, SL), 0.001);\n    float SNH = max(dot(N, SH), 0.0);\n    float distSqr = dot(SLU, SLU);\n    float litRadius = cc_spotLitSizeRangeAngle[i].x;\n    float litRadiusSqr = litRadius * litRadius;\n    float illum = 3.14159265359 * (litRadiusSqr / max(litRadiusSqr , distSqr));\n    float attRadiusSqrInv = 1.0 / max(cc_spotLitSizeRangeAngle[i].y, 0.01);\n    attRadiusSqrInv *= attRadiusSqrInv;\n    float cosInner = max(dot(-cc_spotLitDir[i].xyz, SL), 0.01);\n    float cosOuter = cc_spotLitSizeRangeAngle[i].z;\n    float litAngleScale = 1.0 / max(0.001, cosInner - cosOuter);\n    float litAngleOffset = -cosOuter * litAngleScale;\n    float att = GetDistAtt(distSqr, attRadiusSqrInv);\n    att *= GetAngleAtt(SL, -cc_spotLitDir[i].xyz, litAngleScale, litAngleOffset);\n    vec3 lspec = specular * CalcSpecular(roughness, SNH, SH, N);\n    lighting += SNL * cc_spotLitColor[i].rgb * cc_spotLitColor[i].w * illum * att * (diffuseContrib + lspec);\n  }\n  return lighting;\n}\nstruct StandardSurface {\n  vec4 albedo;\n  vec3 position;\n  vec3 normal;\n  vec3 emissive;\n  float roughness;\n  float metallic;\n  float occlusion;\n};\nvec4 CCStandardShading (StandardSurface s) {\n  vec3 diffuse = s.albedo.rgb * (1.0 - s.metallic);\n  vec3 specular = mix(vec3(0.04), s.albedo.rgb, s.metallic);\n  vec3 N = normalize(s.normal);\n  vec3 V = normalize(cc_cameraPos.xyz - s.position);\n  vec3 L = normalize(-cc_mainLitDir.xyz);\n  vec3 H = normalize(L+V);\n  float NV = max(abs(dot(N, V)), 0.001);\n  float NL = max(dot(N, L), 0.001);\n  float NH = max(dot(N, H), 0.0);\n  specular = BRDFApprox(specular, s.roughness, NV);\n  vec3 diffuseContrib = diffuse / 3.14159265359;\n  vec3 specularContrib = specular * CalcSpecular(s.roughness, NH, H, N);\n  vec3 finalColor = NL * cc_mainLitColor.rgb * cc_mainLitColor.w * (diffuseContrib + specularContrib);\n  finalColor += CalcDynamicLighting(s.position, N, V, diffuse, specular, s.roughness);\n  float fAmb = 0.5 - N.y * 0.5;\n  vec3 ambDiff = mix(cc_ambientSky.rgb, cc_ambientGround.rgb, fAmb) * cc_ambientSky.w;\n  finalColor += (ambDiff.rgb * diffuse);\n  #if CC_USE_IBL\n    vec3 R = normalize(reflect(-V, N));\n    vec4 envmap = fragTextureLod(cc_environment, R, s.roughness * cc_ambientGround.w);\n    #if CC_USE_IBL == 2\n      vec3 env = unpackRGBE(envmap);\n    #else\n      vec3 env = SRGBToLinear(envmap.rgb);\n    #endif\n    finalColor += env * cc_ambientSky.w * specular;\n  #endif\n  finalColor = finalColor * s.occlusion;\n  #if CC_USE_HDR\n    s.emissive *= cc_exposure.w;\n  #endif\n  finalColor += s.emissive;\n  return vec4(finalColor, s.albedo.a);\n}\nvec3 ACESToneMap (vec3 color) {\n  color = min(color, vec3(8.0));\n  const float A = 2.51;\n  const float B = 0.03;\n  const float C = 2.43;\n  const float D = 0.59;\n  const float E = 0.14;\n  return (color * (A * color + B)) / (color * (C * color + D) + E);\n}\nvec4 CCFragOutput (vec4 color) {\n  #if !CC_USE_HDR\n    color.rgb = sqrt(ACESToneMap(color.rgb));\n  #endif\n  return color;\n}\nuniform Constants {\n  vec4 tilingOffset;\n  vec4 albedo;\n  vec4 albedoScaleAndCutoff;\n  vec4 pbrParams;\n  vec4 emissive;\n  vec4 emissiveScaleParam;\n};\nin vec3 v_position;\nin vec2 v_uv;\nin vec2 v_uv1;\nin vec3 v_normal;\n#if USE_VERTEX_COLOR\n  in vec3 v_color;\n#endif\n#if USE_ALBEDO_MAP\n  uniform sampler2D albedoMap;\n#endif\n#if USE_NORMAL_MAP\n  in vec3 v_tangent;\n  in vec3 v_bitangent;\n  uniform sampler2D normalMap;\n#endif\n#if USE_PBR_MAP\n  uniform sampler2D pbrMap;\n#endif\n#if USE_METALLIC_ROUGHNESS_MAP\n  uniform sampler2D metallicRoughnessMap;\n#endif\n#if USE_OCCLUSION_MAP\n  uniform sampler2D occlusionMap;\n#endif\n#if USE_EMISSIVE_MAP\n  uniform sampler2D emissiveMap;\n#endif\n#if USE_LIGHTMAP\n  in vec2 v_luv;\n  uniform sampler2D cc_lightingMap;\n#endif\n#if USE_ALPHA_TEST\n#endif\nvoid surf (out StandardSurface s) {\n  vec4 baseColor = albedo;\n  #if USE_VERTEX_COLOR\n    baseColor.rgb *= v_color;\n  #endif\n  #if USE_ALBEDO_MAP\n    vec4 texColor = texture(albedoMap, ALBEDO_UV);\n    texColor.rgb = SRGBToLinear(texColor.rgb);\n    baseColor *= texColor;\n  #endif\n  s.albedo = baseColor;\n  s.albedo.rgb *= albedoScaleAndCutoff.xyz;\n  #if USE_ALPHA_TEST\n    if (s.albedo.ALPHA_TEST_CHANNEL < albedoScaleAndCutoff.w) discard;\n  #endif\n  s.normal = v_normal;\n  #if USE_NORMAL_MAP\n    vec3 nmmp = texture(normalMap, NORMAL_UV).xyz - vec3(0.5);\n    s.normal =\n      (nmmp.x * pbrParams.w) * normalize(v_tangent) +\n      (nmmp.y * pbrParams.w) * normalize(v_bitangent) +\n      nmmp.z * normalize(s.normal);\n  #endif\n  s.position = v_position;\n  vec4 pbr = pbrParams;\n  #if USE_PBR_MAP\n    vec4 res = texture(pbrMap, PBR_UV);\n    pbr.x *= res.OCCLUSION_CHANNEL;\n    pbr.y *= res.ROUGHNESS_CHANNEL;\n    pbr.z *= res.METALLIC_CHANNEL;\n  #endif\n  #if USE_METALLIC_ROUGHNESS_MAP\n    vec4 metallicRoughness = texture(metallicRoughnessMap, METALLIC_ROUGHNESS_UV);\n    pbr.z *= metallicRoughness.METALLIC_CHANNEL;\n    pbr.y *= metallicRoughness.ROUGHNESS_CHANNEL;\n  #endif\n  #if USE_OCCLUSION_MAP\n    pbr.x *= texture(occlusionMap, OCCLUSION_UV).OCCLUSION_CHANNEL;\n  #endif\n  s.occlusion = clamp(pbr.x, 0.0, 0.96);\n  s.roughness = clamp(pbr.y, 0.04, 1.0);\n  s.metallic = pbr.z;\n  s.emissive = emissive.rgb * emissiveScaleParam.xyz;\n  #if USE_EMISSIVE_MAP\n    s.emissive *= SRGBToLinear(texture(emissiveMap, EMISSIVE_UV).rgb);\n  #endif\n}\nvec4 frag () {\n  StandardSurface s; surf(s);\n  vec4 color = CCStandardShading(s);\n  #if USE_LIGHTMAP && !USE_BATCHING && !USE_INSTANCING\n    vec4 lighting = texture(cc_lightingMap, v_luv);\n    float fAmb = 0.5 - s.normal.y * 0.5;\n    vec3 ambDiff = mix(cc_ambientSky.rgb, cc_ambientGround.rgb, fAmb) * cc_ambientSky.w;\n    vec3 finalColor = (ambDiff.rgb * s.albedo.rgb);\n    finalColor += lighting.rgb *  s.albedo.rgb;\n    finalColor = finalColor * s.occlusion;\n    finalColor += s.emissive;\n    color.rgb = lighting.a * finalColor + (1.0 - lighting.a) * color.rgb;\n  #endif\n  return CCFragOutput(color);\n}\nout vec4 cc_FragColor;\nvoid main() { cc_FragColor = frag(); }"},"glsl1":{"vert":"\nprecision highp float;\nstruct StandardVertInput {\n  highp vec4 position;\n  vec3 normal;\n  vec4 tangent;\n};\nattribute vec3 a_position;\nattribute vec3 a_normal;\nattribute vec4 a_tangent;\n#if CC_USE_MORPH\n    attribute float a_vertexId;\n    int getVertexId() {\n        return int(a_vertexId);\n    }\nuniform vec4 cc_displacementWeights[15];\nuniform vec4 cc_displacementTextureInfo;\n    vec4 fetchFlatPixel(sampler2D tex, int pixelIndex) {\n        float pixelIndexF = float(pixelIndex);\n        vec2 textureResolution = vec2(float(cc_displacementTextureInfo.x), float(cc_displacementTextureInfo.y));\n        float pixelX = mod(pixelIndexF, textureResolution.x);\n        float pixelY = floor(pixelIndexF / textureResolution.x);\n        vec2 uv = (vec2(pixelX, pixelY) + .5) / textureResolution;\n        return texture2D(tex, uv);\n    }\nfloat getDisplacementWeight(int index) {\n    float m = mod(float(index), 4.0);\n    if (m < 1.0) {\n        return cc_displacementWeights[index / 4].x;\n    } else if (m < 2.0) {\n        return cc_displacementWeights[index / 4].y;\n    } else if (m < 3.0) {\n        return cc_displacementWeights[index / 4].z;\n    } else {\n        return cc_displacementWeights[index / 4].w;\n    }\n}\nvec3 getVec3DisplacementFromTexture(sampler2D tex, int vertexIndex) {\n#if CC_MORPH_PRECOMPUTED\n    return fetchFlatPixel(tex, vertexIndex).rgb;\n#else\n    vec3 result = vec3(0, 0, 0);\n    for (int iTarget = 0; iTarget < CC_MORPH_TARGET_COUNT; ++iTarget) {\n        int dataPixelStart = int(fetchFlatPixel(tex, iTarget).r);\n        result += (fetchFlatPixel(tex, dataPixelStart + vertexIndex).rgb * getDisplacementWeight(iTarget));\n    }\n    return result;\n#endif\n}\n#if CC_MORPH_TARGET_HAS_POSITION\n    uniform sampler2D cc_PositionDisplacements;\n    vec3 getPositionDisplacement(int vertexId) {\n        return getVec3DisplacementFromTexture(cc_PositionDisplacements, vertexId);\n    }\n#endif\n#if CC_MORPH_TARGET_HAS_NORMAL\n    uniform sampler2D cc_NormalDisplacements;\n    vec3 getNormalDisplacement(int vertexId) {\n        return getVec3DisplacementFromTexture(cc_NormalDisplacements, vertexId);\n    }\n#endif\n#if CC_MORPH_TARGET_HAS_TANGENT\n    uniform sampler2D cc_TangentDisplacements;\n    vec3 getTangentDisplacement(int vertexId) {\n        return getVec3DisplacementFromTexture(cc_TangentDisplacements, vertexId);\n    }\n#endif\nvoid applyMorph (inout StandardVertInput attr) {\n    int vertexId = getVertexId();\n#if CC_MORPH_TARGET_HAS_POSITION\n    attr.position.xyz = attr.position.xyz + getPositionDisplacement(vertexId);\n#endif\n#if CC_MORPH_TARGET_HAS_NORMAL\n    attr.normal.xyz = attr.normal.xyz + getNormalDisplacement(vertexId);\n#endif\n#if CC_MORPH_TARGET_HAS_TANGENT\n    attr.tangent.xyz = attr.tangent.xyz + getTangentDisplacement(vertexId);\n#endif\n}\nvoid applyMorph (inout vec4 position) {\n#if CC_MORPH_TARGET_HAS_POSITION\n    position.xyz = position.xyz + getPositionDisplacement(getVertexId());\n#endif\n}\n#endif\n#if CC_USE_SKINNING\nattribute vec4 a_weights;\nattribute vec4 a_joints;\n#if CC_USE_BAKED_ANIMATION\n  #if USE_INSTANCING\n    attribute highp vec4 a_jointAnimInfo;\n  #endif\n  uniform highp vec4 cc_jointTextureInfo;\n  uniform highp vec4 cc_jointAnimInfo;\n  uniform sampler2D cc_jointTexture;\n    #if !CC_SUPPORT_FLOAT_TEXTURE\n    highp float decode32 (highp vec4 rgba) {\n      rgba = rgba * 255.0;\n      highp float Sign = 1.0 - step(128.0, rgba[3]) * 2.0;\n      highp float Exponent = 2.0 * mod(rgba[3], 128.0) + step(128.0, rgba[2]) - 127.0;\n      highp float Mantissa = mod(rgba[2], 128.0) * 65536.0 + rgba[1] * 256.0 + rgba[0] + 8388608.0;\n      return Sign * exp2(Exponent - 23.0) * Mantissa;\n    }\n  #endif\n#else\n  uniform highp vec4 cc_joints[90];\n#endif\n#if CC_USE_BAKED_ANIMATION\n  #if CC_SUPPORT_FLOAT_TEXTURE\n    mat4 getJointMatrix (float i) {\n    #if USE_INSTANCING\n      highp float j = 3.0 * (a_jointAnimInfo.x * a_jointAnimInfo.y + i) + a_jointAnimInfo.z;\n    #else\n      highp float j = 3.0 * (cc_jointAnimInfo.x * cc_jointTextureInfo.y + i) + cc_jointTextureInfo.z;\n    #endif\n    highp float invSize = cc_jointTextureInfo.w;\n    highp float y = floor(j * invSize);\n    highp float x = j - y * cc_jointTextureInfo.x;\n    y = (y + 0.5) * invSize;\n      vec4 v1 = texture2D(cc_jointTexture, vec2((x + 0.5) * invSize, y));\n      vec4 v2 = texture2D(cc_jointTexture, vec2((x + 1.5) * invSize, y));\n      vec4 v3 = texture2D(cc_jointTexture, vec2((x + 2.5) * invSize, y));\n      return mat4(vec4(v1.xyz, 0.0), vec4(v2.xyz, 0.0), vec4(v3.xyz, 0.0), vec4(v1.w, v2.w, v3.w, 1.0));\n    }\n  #else\n    mat4 getJointMatrix (float i) {\n    #if USE_INSTANCING\n      highp float j = 12.0 * (a_jointAnimInfo.x * a_jointAnimInfo.y + i) + a_jointAnimInfo.z;\n    #else\n      highp float j = 12.0 * (cc_jointAnimInfo.x * cc_jointTextureInfo.y + i) + cc_jointTextureInfo.z;\n    #endif\n    highp float invSize = cc_jointTextureInfo.w;\n    highp float y = floor(j * invSize);\n    highp float x = j - y * cc_jointTextureInfo.x;\n    y = (y + 0.5) * invSize;\n      vec4 v1 = vec4(\n        decode32(texture2D(cc_jointTexture, vec2((x + 0.5) * invSize, y))),\n        decode32(texture2D(cc_jointTexture, vec2((x + 1.5) * invSize, y))),\n        decode32(texture2D(cc_jointTexture, vec2((x + 2.5) * invSize, y))),\n        decode32(texture2D(cc_jointTexture, vec2((x + 3.5) * invSize, y)))\n      );\n      vec4 v2 = vec4(\n        decode32(texture2D(cc_jointTexture, vec2((x + 4.5) * invSize, y))),\n        decode32(texture2D(cc_jointTexture, vec2((x + 5.5) * invSize, y))),\n        decode32(texture2D(cc_jointTexture, vec2((x + 6.5) * invSize, y))),\n        decode32(texture2D(cc_jointTexture, vec2((x + 7.5) * invSize, y)))\n      );\n      vec4 v3 = vec4(\n        decode32(texture2D(cc_jointTexture, vec2((x + 8.5) * invSize, y))),\n        decode32(texture2D(cc_jointTexture, vec2((x + 9.5) * invSize, y))),\n        decode32(texture2D(cc_jointTexture, vec2((x + 10.5) * invSize, y))),\n        decode32(texture2D(cc_jointTexture, vec2((x + 11.5) * invSize, y)))\n      );\n      return mat4(vec4(v1.xyz, 0.0), vec4(v2.xyz, 0.0), vec4(v3.xyz, 0.0), vec4(v1.w, v2.w, v3.w, 1.0));\n    }\n  #endif\n#else\n  mat4 getJointMatrix (float i) {\n    int idx = int(i);\n    vec4 v1 = cc_joints[idx * 3];\n    vec4 v2 = cc_joints[idx * 3 + 1];\n    vec4 v3 = cc_joints[idx * 3 + 2];\n    return mat4(vec4(v1.xyz, 0.0), vec4(v2.xyz, 0.0), vec4(v3.xyz, 0.0), vec4(v1.w, v2.w, v3.w, 1.0));\n  }\n#endif\nmat4 skinMatrix () {\n  return getJointMatrix(a_joints.x) * a_weights.x\n       + getJointMatrix(a_joints.y) * a_weights.y\n       + getJointMatrix(a_joints.z) * a_weights.z\n       + getJointMatrix(a_joints.w) * a_weights.w;\n}\nvoid CCSkin (inout vec4 position) {\n  mat4 m = skinMatrix();\n  position = m * position;\n}\nvoid CCSkin (inout StandardVertInput attr) {\n  mat4 m = skinMatrix();\n  attr.position = m * attr.position;\n  attr.normal = (m * vec4(attr.normal, 0.0)).xyz;\n  attr.tangent.xyz = (m * vec4(attr.tangent.xyz, 0.0)).xyz;\n}\n#endif\nuniform highp mat4 cc_matView;\nuniform highp mat4 cc_matProj;\n#if USE_INSTANCING\n  attribute vec4 a_matWorld0;\n  attribute vec4 a_matWorld1;\n  attribute vec4 a_matWorld2;\n#elif USE_BATCHING\n  attribute float a_dyn_batch_id;\n  uniform highp mat4 cc_matWorlds[10];\n#else\nuniform highp mat4 cc_matWorld;\nuniform highp mat4 cc_matWorldIT;\nuniform highp vec4 cc_lightingMapUVParam;\n#endif\nuniform vec4 tilingOffset;\n#if USE_VERTEX_COLOR\n  attribute vec3 a_color;\n  varying vec3 v_color;\n#endif\nvarying vec3 v_position;\nvarying vec3 v_normal;\n#if USE_NORMAL_MAP\n  varying vec3 v_tangent;\n  varying vec3 v_bitangent;\n#endif\nattribute vec2 a_texCoord;\nvarying vec2 v_uv;\nattribute vec2 a_texCoord1;\nvarying vec2 v_uv1;\n#if USE_LIGHTMAP && !USE_BATCHING && !USE_INSTANCING\n  varying vec2 v_luv;\n#endif\nvec4 vert () {\n  StandardVertInput In;\n  In.position = vec4(a_position, 1.0);\n  In.normal = a_normal;\n  In.tangent = a_tangent;\n  #if CC_USE_MORPH\n    applyMorph(In);\n  #endif\n  #if CC_USE_SKINNING\n    CCSkin(In);\n  #endif\n  mat4 matWorld, matWorldIT;\n  #if USE_INSTANCING\n    matWorld = mat4(\n      vec4(a_matWorld0.xyz, 0.0),\n      vec4(a_matWorld1.xyz, 0.0),\n      vec4(a_matWorld2.xyz, 0.0),\n      vec4(a_matWorld0.w, a_matWorld1.w, a_matWorld2.w, 1.0)\n    );\n    matWorldIT = matWorld;\n  #elif USE_BATCHING\n    matWorld = cc_matWorlds[int(a_dyn_batch_id)];\n    matWorldIT = matWorld;\n  #else\n    matWorld = cc_matWorld;\n    matWorldIT = cc_matWorldIT;\n  #endif\n  vec4 pos = matWorld * In.position;\n  v_position = pos.xyz;\n  v_normal = normalize((matWorldIT * vec4(In.normal, 0.0)).xyz);\n  #if USE_NORMAL_MAP\n    v_tangent = normalize((matWorld * vec4(In.tangent.xyz, 0.0)).xyz);\n    v_bitangent = cross(v_normal, v_tangent) * In.tangent.w;\n  #endif\n  v_uv = a_texCoord * tilingOffset.xy + tilingOffset.zw;\n  #if HAS_SECOND_UV\n    v_uv1 = a_texCoord1 * tilingOffset.xy + tilingOffset.zw;\n  #endif\n  #if USE_VERTEX_COLOR\n    v_color = a_color;\n  #endif\n  #if USE_LIGHTMAP && HAS_SECOND_UV && !USE_BATCHING && !USE_INSTANCING\n    v_luv = cc_lightingMapUVParam.xy + a_texCoord1 * cc_lightingMapUVParam.zw;\n  #endif\n  return cc_matProj * (cc_matView * matWorld) * In.position;\n}\nvoid main() { gl_Position = vert(); }","frag":"\n  #ifdef GL_EXT_shader_texture_lod\n    #extension GL_EXT_shader_texture_lod : enable\n  #endif\nprecision highp float;\nuniform highp vec4 cc_cameraPos;\nuniform mediump vec4 cc_exposure;\nuniform mediump vec4 cc_mainLitDir;\nuniform mediump vec4 cc_mainLitColor;\nuniform mediump vec4 cc_ambientSky;\nuniform mediump vec4 cc_ambientGround;\n#if CC_USE_IBL\nuniform samplerCube cc_environment;\nvec3 unpackRGBE (vec4 rgbe) {\n  return rgbe.rgb * pow(2.0, rgbe.a * 255.0 - 128.0);\n}\nvec4 fragTextureLod (sampler2D tex, vec2 coord, float lod) {\n    #ifdef GL_EXT_shader_texture_lod\n      return texture2DLodEXT(tex, coord, lod);\n    #else\n      return texture2D(tex, coord, lod);\n    #endif\n}\nvec4 fragTextureLod (samplerCube tex, vec3 coord, float lod) {\n    #ifdef GL_EXT_shader_texture_lod\n      return textureCubeLodEXT(tex, coord, lod);\n    #else\n      return textureCube(tex, coord, lod);\n    #endif\n}\n#endif\nvec3 SRGBToLinear (vec3 gamma) {\n  return gamma * gamma;\n}\nuniform highp vec4 cc_sphereLitPos[2];\nuniform vec4 cc_sphereLitSizeRange[2];\nuniform vec4 cc_sphereLitColor[2];\nuniform highp vec4 cc_spotLitPos[2];\nuniform vec4 cc_spotLitSizeRangeAngle[2];\nuniform vec4 cc_spotLitDir[2];\nuniform vec4 cc_spotLitColor[2];\nfloat SmoothDistAtt (float distSqr, float invSqrAttRadius) {\n  float factor = distSqr * invSqrAttRadius;\n  float smoothFactor = clamp(1.0 - factor * factor, 0.0, 1.0);\n  return smoothFactor * smoothFactor;\n}\nfloat GetDistAtt (float distSqr, float invSqrAttRadius) {\n  float attenuation = 1.0 / max(distSqr, 0.01*0.01);\n  attenuation *= SmoothDistAtt(distSqr , invSqrAttRadius);\n  return attenuation;\n}\nfloat GetAngleAtt (vec3 L, vec3 litDir, float litAngleScale, float litAngleOffset) {\n  float cd = dot(litDir, L);\n  float attenuation = clamp(cd * litAngleScale + litAngleOffset, 0.0, 1.0);\n  return (attenuation * attenuation);\n}\nfloat GGXMobile (float roughness, float NoH, vec3 H, vec3 N) {\n  vec3 NxH = cross(N, H);\n  float OneMinusNoHSqr = dot(NxH, NxH);\n  float a = roughness * roughness;\n  float n = NoH * a;\n  float p = a / (OneMinusNoHSqr + n * n);\n  return p * p;\n}\nfloat CalcSpecular (float roughness, float NoH, vec3 H, vec3 N) {\n  return (roughness*0.25 + 0.25) * GGXMobile(roughness, NoH, H, N);\n}\nvec3 BRDFApprox (vec3 specular, float roughness, float NoV) {\n  const vec4 c0 = vec4(-1.0, -0.0275, -0.572, 0.022);\n  const vec4 c1 = vec4(1.0, 0.0425, 1.04, -0.04);\n  vec4 r = roughness * c0 + c1;\n  float a004 = min( r.x * r.x, exp2( -9.28 * NoV ) ) * r.x + r.y;\n  vec2 AB = vec2( -1.04, 1.04 ) * a004 + r.zw;\n  AB.y *= clamp(50.0 * specular.g, 0.0, 1.0);\n  return specular * AB.x + AB.y;\n}\nvec3 CalcDynamicLighting (vec3 worldPos, vec3 N, vec3 V, vec3 diffuse, vec3 specular, float roughness) {\n  vec3 lighting = vec3(0.0);\n  vec3 diffuseContrib = diffuse / 3.14159265359;\n  for (int i = 0; i < 2; i++) {\n    vec3 PLU = cc_sphereLitPos[i].xyz - worldPos;\n    vec3 PL = normalize(PLU);\n    vec3 PH = normalize(PL + V);\n    float PNL = max(dot(N, PL), 0.001);\n    float PNH = max(dot(N, PH), 0.0);\n    float distSqr = dot(PLU, PLU);\n    float litRadius = cc_sphereLitSizeRange[i].x;\n    float litRadiusSqr = litRadius * litRadius;\n    float illum = 3.14159265359 * (litRadiusSqr / max(litRadiusSqr , distSqr));\n    float attRadiusSqrInv = 1.0 / max(cc_sphereLitSizeRange[i].y, 0.01);\n    attRadiusSqrInv *= attRadiusSqrInv;\n    float att = GetDistAtt(distSqr, attRadiusSqrInv);\n    vec3 lspec = specular * CalcSpecular(roughness, PNH, PH, N);\n    lighting += PNL * cc_sphereLitColor[i].rgb * cc_sphereLitColor[i].w * illum * att * (diffuseContrib + lspec);\n  }\n  for (int i = 0; i < 2; i++) {\n    vec3 SLU = cc_spotLitPos[i].xyz - worldPos;\n    vec3 SL = normalize(SLU);\n    vec3 SH = normalize(SL + V);\n    float SNL = max(dot(N, SL), 0.001);\n    float SNH = max(dot(N, SH), 0.0);\n    float distSqr = dot(SLU, SLU);\n    float litRadius = cc_spotLitSizeRangeAngle[i].x;\n    float litRadiusSqr = litRadius * litRadius;\n    float illum = 3.14159265359 * (litRadiusSqr / max(litRadiusSqr , distSqr));\n    float attRadiusSqrInv = 1.0 / max(cc_spotLitSizeRangeAngle[i].y, 0.01);\n    attRadiusSqrInv *= attRadiusSqrInv;\n    float cosInner = max(dot(-cc_spotLitDir[i].xyz, SL), 0.01);\n    float cosOuter = cc_spotLitSizeRangeAngle[i].z;\n    float litAngleScale = 1.0 / max(0.001, cosInner - cosOuter);\n    float litAngleOffset = -cosOuter * litAngleScale;\n    float att = GetDistAtt(distSqr, attRadiusSqrInv);\n    att *= GetAngleAtt(SL, -cc_spotLitDir[i].xyz, litAngleScale, litAngleOffset);\n    vec3 lspec = specular * CalcSpecular(roughness, SNH, SH, N);\n    lighting += SNL * cc_spotLitColor[i].rgb * cc_spotLitColor[i].w * illum * att * (diffuseContrib + lspec);\n  }\n  return lighting;\n}\nstruct StandardSurface {\n  vec4 albedo;\n  vec3 position;\n  vec3 normal;\n  vec3 emissive;\n  float roughness;\n  float metallic;\n  float occlusion;\n};\nvec4 CCStandardShading (StandardSurface s) {\n  vec3 diffuse = s.albedo.rgb * (1.0 - s.metallic);\n  vec3 specular = mix(vec3(0.04), s.albedo.rgb, s.metallic);\n  vec3 N = normalize(s.normal);\n  vec3 V = normalize(cc_cameraPos.xyz - s.position);\n  vec3 L = normalize(-cc_mainLitDir.xyz);\n  vec3 H = normalize(L+V);\n  float NV = max(abs(dot(N, V)), 0.001);\n  float NL = max(dot(N, L), 0.001);\n  float NH = max(dot(N, H), 0.0);\n  specular = BRDFApprox(specular, s.roughness, NV);\n  vec3 diffuseContrib = diffuse / 3.14159265359;\n  vec3 specularContrib = specular * CalcSpecular(s.roughness, NH, H, N);\n  vec3 finalColor = NL * cc_mainLitColor.rgb * cc_mainLitColor.w * (diffuseContrib + specularContrib);\n  finalColor += CalcDynamicLighting(s.position, N, V, diffuse, specular, s.roughness);\n  float fAmb = 0.5 - N.y * 0.5;\n  vec3 ambDiff = mix(cc_ambientSky.rgb, cc_ambientGround.rgb, fAmb) * cc_ambientSky.w;\n  finalColor += (ambDiff.rgb * diffuse);\n  #if CC_USE_IBL\n    vec3 R = normalize(reflect(-V, N));\n    vec4 envmap = fragTextureLod(cc_environment, R, s.roughness * cc_ambientGround.w);\n    #if CC_USE_IBL == 2\n      vec3 env = unpackRGBE(envmap);\n    #else\n      vec3 env = SRGBToLinear(envmap.rgb);\n    #endif\n    finalColor += env * cc_ambientSky.w * specular;\n  #endif\n  finalColor = finalColor * s.occlusion;\n  #if CC_USE_HDR\n    s.emissive *= cc_exposure.w;\n  #endif\n  finalColor += s.emissive;\n  return vec4(finalColor, s.albedo.a);\n}\nvec3 ACESToneMap (vec3 color) {\n  color = min(color, vec3(8.0));\n  const float A = 2.51;\n  const float B = 0.03;\n  const float C = 2.43;\n  const float D = 0.59;\n  const float E = 0.14;\n  return (color * (A * color + B)) / (color * (C * color + D) + E);\n}\nvec4 CCFragOutput (vec4 color) {\n  #if !CC_USE_HDR\n    color.rgb = sqrt(ACESToneMap(color.rgb));\n  #endif\n  return color;\n}\nuniform vec4 albedo;\nuniform vec4 albedoScaleAndCutoff;\nuniform vec4 pbrParams;\nuniform vec4 emissive;\nuniform vec4 emissiveScaleParam;\nvarying vec3 v_position;\nvarying vec2 v_uv;\nvarying vec2 v_uv1;\nvarying vec3 v_normal;\n#if USE_VERTEX_COLOR\n  varying vec3 v_color;\n#endif\n#if USE_ALBEDO_MAP\n  uniform sampler2D albedoMap;\n#endif\n#if USE_NORMAL_MAP\n  varying vec3 v_tangent;\n  varying vec3 v_bitangent;\n  uniform sampler2D normalMap;\n#endif\n#if USE_PBR_MAP\n  uniform sampler2D pbrMap;\n#endif\n#if USE_METALLIC_ROUGHNESS_MAP\n  uniform sampler2D metallicRoughnessMap;\n#endif\n#if USE_OCCLUSION_MAP\n  uniform sampler2D occlusionMap;\n#endif\n#if USE_EMISSIVE_MAP\n  uniform sampler2D emissiveMap;\n#endif\n#if USE_LIGHTMAP\n  varying vec2 v_luv;\n  uniform sampler2D cc_lightingMap;\n#endif\n#if USE_ALPHA_TEST\n#endif\nvoid surf (out StandardSurface s) {\n  vec4 baseColor = albedo;\n  #if USE_VERTEX_COLOR\n    baseColor.rgb *= v_color;\n  #endif\n  #if USE_ALBEDO_MAP\n    vec4 texColor = texture2D(albedoMap, ALBEDO_UV);\n    texColor.rgb = SRGBToLinear(texColor.rgb);\n    baseColor *= texColor;\n  #endif\n  s.albedo = baseColor;\n  s.albedo.rgb *= albedoScaleAndCutoff.xyz;\n  #if USE_ALPHA_TEST\n    if (s.albedo.ALPHA_TEST_CHANNEL < albedoScaleAndCutoff.w) discard;\n  #endif\n  s.normal = v_normal;\n  #if USE_NORMAL_MAP\n    vec3 nmmp = texture2D(normalMap, NORMAL_UV).xyz - vec3(0.5);\n    s.normal =\n      (nmmp.x * pbrParams.w) * normalize(v_tangent) +\n      (nmmp.y * pbrParams.w) * normalize(v_bitangent) +\n      nmmp.z * normalize(s.normal);\n  #endif\n  s.position = v_position;\n  vec4 pbr = pbrParams;\n  #if USE_PBR_MAP\n    vec4 res = texture2D(pbrMap, PBR_UV);\n    pbr.x *= res.OCCLUSION_CHANNEL;\n    pbr.y *= res.ROUGHNESS_CHANNEL;\n    pbr.z *= res.METALLIC_CHANNEL;\n  #endif\n  #if USE_METALLIC_ROUGHNESS_MAP\n    vec4 metallicRoughness = texture2D(metallicRoughnessMap, METALLIC_ROUGHNESS_UV);\n    pbr.z *= metallicRoughness.METALLIC_CHANNEL;\n    pbr.y *= metallicRoughness.ROUGHNESS_CHANNEL;\n  #endif\n  #if USE_OCCLUSION_MAP\n    pbr.x *= texture2D(occlusionMap, OCCLUSION_UV).OCCLUSION_CHANNEL;\n  #endif\n  s.occlusion = clamp(pbr.x, 0.0, 0.96);\n  s.roughness = clamp(pbr.y, 0.04, 1.0);\n  s.metallic = pbr.z;\n  s.emissive = emissive.rgb * emissiveScaleParam.xyz;\n  #if USE_EMISSIVE_MAP\n    s.emissive *= SRGBToLinear(texture2D(emissiveMap, EMISSIVE_UV).rgb);\n  #endif\n}\nvec4 frag () {\n  StandardSurface s; surf(s);\n  vec4 color = CCStandardShading(s);\n  #if USE_LIGHTMAP && !USE_BATCHING && !USE_INSTANCING\n    vec4 lighting = texture2D(cc_lightingMap, v_luv);\n    float fAmb = 0.5 - s.normal.y * 0.5;\n    vec3 ambDiff = mix(cc_ambientSky.rgb, cc_ambientGround.rgb, fAmb) * cc_ambientSky.w;\n    vec3 finalColor = (ambDiff.rgb * s.albedo.rgb);\n    finalColor += lighting.rgb *  s.albedo.rgb;\n    finalColor = finalColor * s.occlusion;\n    finalColor += s.emissive;\n    color.rgb = lighting.a * finalColor + (1.0 - lighting.a) * color.rgb;\n  #endif\n  return CCFragOutput(color);\n}\nvoid main() { gl_FragColor = frag(); }"},"builtins":{"globals":{"blocks":[{"name":"CCGlobal","defines":[]}],"samplers":[{"name":"cc_environment","defines":["CC_USE_IBL"]}]},"locals":{"blocks":[{"name":"CCMorph","defines":["CC_USE_MORPH"]},{"name":"CCSkinningTexture","defines":["CC_USE_SKINNING","CC_USE_BAKED_ANIMATION"]},{"name":"CCSkinningAnimation","defines":["CC_USE_SKINNING","CC_USE_BAKED_ANIMATION"]},{"name":"CCSkinning","defines":["CC_USE_SKINNING","!CC_USE_BAKED_ANIMATION"]},{"name":"CCLocalBatched","defines":["!USE_INSTANCING","USE_BATCHING"]},{"name":"CCLocal","defines":["!USE_INSTANCING","!USE_BATCHING"]},{"name":"CCForwardLight","defines":[]}],"samplers":[{"name":"cc_PositionDisplacements","defines":["CC_USE_MORPH","CC_MORPH_TARGET_HAS_POSITION"]},{"name":"cc_NormalDisplacements","defines":["CC_USE_MORPH","CC_MORPH_TARGET_HAS_NORMAL"]},{"name":"cc_TangentDisplacements","defines":["CC_USE_MORPH","CC_MORPH_TARGET_HAS_TANGENT"]},{"name":"cc_jointTexture","defines":["CC_USE_SKINNING","CC_USE_BAKED_ANIMATION"]},{"name":"cc_lightingMap","defines":["USE_LIGHTMAP"]}]}},"defines":[{"name":"CC_USE_MORPH","type":"boolean"},{"name":"CC_MORPH_TARGET_COUNT","type":"number","range":[2,8]},{"name":"CC_MORPH_PRECOMPUTED","type":"boolean"},{"name":"CC_MORPH_TARGET_HAS_POSITION","type":"boolean"},{"name":"CC_MORPH_TARGET_HAS_NORMAL","type":"boolean"},{"name":"CC_MORPH_TARGET_HAS_TANGENT","type":"boolean"},{"name":"CC_USE_SKINNING","type":"boolean"},{"name":"CC_USE_BAKED_ANIMATION","type":"boolean"},{"name":"USE_INSTANCING","type":"boolean"},{"name":"CC_SUPPORT_FLOAT_TEXTURE","type":"boolean"},{"name":"USE_BATCHING","type":"boolean"},{"name":"USE_VERTEX_COLOR","type":"boolean"},{"name":"USE_NORMAL_MAP","type":"boolean"},{"name":"USE_LIGHTMAP","type":"boolean"},{"name":"HAS_SECOND_UV","type":"boolean"},{"name":"CC_USE_IBL","type":"number","range":[0,2]},{"name":"CC_USE_HDR","type":"boolean"},{"name":"USE_ALBEDO_MAP","type":"boolean"},{"name":"ALBEDO_UV","type":"string","options":["v_uv","v_uv1"]},{"name":"NORMAL_UV","type":"string","options":["v_uv","v_uv1"]},{"name":"USE_PBR_MAP","type":"boolean"},{"name":"PBR_UV","type":"string","options":["v_uv","v_uv1"]},{"name":"USE_METALLIC_ROUGHNESS_MAP","type":"boolean"},{"name":"METALLIC_ROUGHNESS_UV","type":"string","options":["v_uv","v_uv1"]},{"name":"USE_OCCLUSION_MAP","type":"boolean"},{"name":"OCCLUSION_UV","type":"string","options":["v_uv","v_uv1"]},{"name":"USE_EMISSIVE_MAP","type":"boolean"},{"name":"EMISSIVE_UV","type":"string","options":["v_uv","v_uv1"]},{"name":"OCCLUSION_CHANNEL","type":"string","options":["r","g","b"]},{"name":"ROUGHNESS_CHANNEL","type":"string","options":["g","b","r"]},{"name":"METALLIC_CHANNEL","type":"string","options":["b","r","g"]},{"name":"USE_ALPHA_TEST","type":"boolean"},{"name":"ALPHA_TEST_CHANNEL","type":"string","options":["a","r"]}],"blocks":[{"name":"Constants","members":[{"name":"tilingOffset","type":16,"count":1},{"name":"albedo","type":16,"count":1},{"name":"albedoScaleAndCutoff","type":16,"count":1},{"name":"pbrParams","type":16,"count":1},{"name":"emissive","type":16,"count":1},{"name":"emissiveScaleParam","type":16,"count":1}],"defines":[],"binding":0}],"samplers":[{"name":"albedoMap","type":28,"count":1,"defines":["USE_ALBEDO_MAP"],"binding":31},{"name":"normalMap","type":28,"count":1,"defines":["USE_NORMAL_MAP"],"binding":32},{"name":"pbrMap","type":28,"count":1,"defines":["USE_PBR_MAP"],"binding":33},{"name":"metallicRoughnessMap","type":28,"count":1,"defines":["USE_METALLIC_ROUGHNESS_MAP"],"binding":34},{"name":"occlusionMap","type":28,"count":1,"defines":["USE_OCCLUSION_MAP"],"binding":35},{"name":"emissiveMap","type":28,"count":1,"defines":["USE_EMISSIVE_MAP"],"binding":36}],"attributes":[{"name":"a_position","type":15,"count":1,"defines":[],"format":32,"location":0},{"name":"a_normal","type":15,"count":1,"defines":[],"format":32,"location":1},{"name":"a_tangent","type":16,"count":1,"defines":[],"format":43,"location":2},{"name":"a_vertexId","type":13,"count":1,"defines":["CC_USE_MORPH"],"format":11,"location":3},{"name":"a_weights","type":16,"count":1,"defines":["CC_USE_SKINNING"],"format":43,"location":4},{"name":"a_joints","type":16,"count":1,"defines":["CC_USE_SKINNING"],"format":43,"location":5},{"name":"a_jointAnimInfo","type":16,"count":1,"precision":"highp ","defines":["CC_USE_SKINNING","CC_USE_BAKED_ANIMATION","USE_INSTANCING"],"format":43,"isInstanced":true,"location":6},{"name":"a_matWorld0","type":16,"count":1,"defines":["USE_INSTANCING"],"format":43,"isInstanced":true,"location":7},{"name":"a_matWorld1","type":16,"count":1,"defines":["USE_INSTANCING"],"format":43,"isInstanced":true,"location":8},{"name":"a_matWorld2","type":16,"count":1,"defines":["USE_INSTANCING"],"format":43,"isInstanced":true,"location":9},{"name":"a_dyn_batch_id","type":13,"count":1,"defines":["!USE_INSTANCING","USE_BATCHING"],"format":11,"location":10},{"name":"a_color","type":15,"count":1,"defines":["USE_VERTEX_COLOR"],"format":32,"location":11},{"name":"a_texCoord","type":14,"count":1,"defines":[],"format":21,"location":12},{"name":"a_texCoord1","type":14,"count":1,"defines":[],"format":21,"location":13}],"record":null,"name":"builtin-standard|standard-vs:vert|standard-fs:frag"}]},{"__type__":"cc.SpriteFrame","content":{"name":"ID_417","rect":{"x":0,"y":0,"width":178,"height":96},"offset":{"x":-1,"y":1},"originalSize":{"width":180,"height":98},"rotated":false,"capInsets":[0,0,0,0],"texture":"1b+CivlyNG+IL3HR9LyFm7@6c48a"}},{"__type__":"cc.SpriteFrame","content":{"name":"ID_419","rect":{"x":0,"y":13,"width":177,"height":107},"offset":{"x":-1,"y":7},"originalSize":{"width":179,"height":147},"rotated":false,"capInsets":[0,0,0,0],"texture":"2b7zrADGhFDpItIFMp0D7D@6c48a"}},{"__type__":"cc.SpriteFrame","content":{"name":"ID_422","rect":{"x":0,"y":0,"width":176,"height":100},"offset":{"x":-2,"y":1},"originalSize":{"width":180,"height":102},"rotated":false,"capInsets":[0,0,0,0],"texture":"2epJRL+ChAlq44Nf26OGnX@6c48a"}},{"__type__":"cc.SpriteFrame","content":{"name":"ID_409","rect":{"x":40,"y":0,"width":276,"height":206},"offset":{"x":18,"y":1},"originalSize":{"width":320,"height":208},"rotated":false,"capInsets":[0,0,0,0],"texture":"2fwfBOTy9P6LhxVVuTv+ph@6c48a"}},{"__type__":"cc.SpriteFrame","content":{"name":"ID_401","rect":{"x":105,"y":8,"width":200,"height":199},"offset":{"x":51,"y":-2.5},"originalSize":{"width":308,"height":210},"rotated":false,"capInsets":[0,0,0,0],"texture":"044mLGRrhGzJxUntungBFa@6c48a"}},{"__type__":"cc.AnimationClip","_name":"marp","_duration":0.16666666666666666,"_keys":[[0,0.08333333333333333,0.16666666666666666]],"_curves":[{"modifiers":["scale"],"data":{"keys":0,"values":[{"__type__":"cc.Vec3","x":1,"y":1,"z":1},{"__type__":"cc.Vec3","x":2,"y":1,"z":1},{"__type__":"cc.Vec3","x":1,"y":1,"z":1}],"easingMethods":{}}}],"_hash":2999086109},{"__type__":"cc.SpriteFrame","content":{"name":"ID_400","rect":{"x":81,"y":0,"width":179,"height":165},"offset":{"x":39.5,"y":2.5},"originalSize":{"width":262,"height":170},"rotated":false,"capInsets":[0,0,0,0],"texture":"7cbRE8rntI3ZEuYHQRig3a@6c48a"}},{"__type__":"cc.AnimationClip","_name":"water","wrapMode":2,"_duration":1.7,"_keys":[[0,0.18333333333333332,0.35,0.5166666666666667,0.6833333333333333,0.85,1.0166666666666666,1.1833333333333333,1.35,1.5166666666666666,1.6833333333333333]],"_curves":[{"modifiers":[{"__type__":"cc.animation.ComponentPath","component":"cc.SpriteComponent"},"spriteFrame"],"data":{"keys":0,"values":[{"__uuid__":"b5h8z9ITpNdZQo63NvSVvV@bd83f"},{"__uuid__":"b5h8z9ITpNdZQo63NvSVvV@7ebc7"},{"__uuid__":"b5h8z9ITpNdZQo63NvSVvV@5bb45"},{"__uuid__":"b5h8z9ITpNdZQo63NvSVvV@14e86"},{"__uuid__":"b5h8z9ITpNdZQo63NvSVvV@521e5"},{"__uuid__":"b5h8z9ITpNdZQo63NvSVvV@c7cf3"},{"__uuid__":"b5h8z9ITpNdZQo63NvSVvV@c5b54"},{"__uuid__":"b5h8z9ITpNdZQo63NvSVvV@bbd1d"},{"__uuid__":"b5h8z9ITpNdZQo63NvSVvV@39858"},{"__uuid__":"b5h8z9ITpNdZQo63NvSVvV@dea1e"},{"__uuid__":"b5h8z9ITpNdZQo63NvSVvV@b23ee"}],"easingMethods":{}}}],"_hash":3684312316},{"__type__":"cc.SpriteFrame","content":{"name":"ID_403","rect":{"x":108,"y":0,"width":164,"height":193},"offset":{"x":53,"y":6.5},"originalSize":{"width":274,"height":206},"rotated":false,"capInsets":[0,0,0,0],"texture":"8dePWiBU5GGLqyMsX4X+DN@6c48a"}},{"__type__":"cc.SpriteFrame","content":{"name":"ID_161","rect":{"x":0,"y":0,"width":952,"height":1024},"offset":{"x":0,"y":0},"originalSize":{"width":952,"height":1024},"rotated":false,"capInsets":[0,0,0,0],"texture":"8dzGDc1k9Ik5spA60COD8I@6c48a"}},{"__type__":"cc.SpriteFrame","content":{"name":"ID_404","rect":{"x":117,"y":9,"width":202,"height":144},"offset":{"x":57,"y":-1},"originalSize":{"width":322,"height":160},"rotated":false,"capInsets":[0,0,0,0],"texture":"8eDfi3zjBFhaou+0DnxHHA@6c48a"}},[{"__type__":"cc.SceneAsset","scene":{"__id__":1}},{"__type__":"cc.Scene","_children":[{"__id__":2},{"__id__":3},{"__id__":4},{"__id__":5}],"_globals":{"__type__":"cc.SceneGlobals","ambient":{"__type__":"cc.AmbientInfo"},"planarShadows":{"__type__":"cc.PlanarShadowInfo"},"_skybox":{"__type__":"cc.SkyboxInfo"}}},{"__type__":"cc.Node","_name":"Main Light","_parent":{"__id__":1},"_components":[{"__type__":"cc.DirectionalLightComponent","node":{"__id__":2},"_staticSettings":{"__type__":"cc.StaticLightSettings"}}],"_lrot":{"__type__":"cc.Quat","x":-0.24999999999999997,"y":-0.24999999999999997,"z":-0.06698729810778066,"w":0.9330127018922194},"_euler":{"__type__":"cc.Vec3","x":-30,"y":-30},"_id":"c0y6F5f+pAvI805TdmxIjx"},{"__type__":"cc.Node","_name":"Camera","_parent":{"__id__":1},"_components":[{"__type__":"cc.CameraComponent","node":{"__id__":3},"_visibility":1822425087}],"_lpos":{"__type__":"cc.Vec3","z":3.987},"_id":"c9DMICJLFO5IeO07EPon7U"},{"__type__":"cc.Node","_name":"Cube","_parent":{"__id__":1},"_components":[{"__type__":"cc.ModelComponent","_name":"Cube<ModelComponent>","node":{"__id__":4},"_materials":[{"__uuid__":"d3x4IMKphEKYvHuEU7yaxB"}],"lightmapSettings":{"__type__":"cc.ModelLightmapSettings"},"_mesh":{"__uuid__":"12Y9dMgWdJKJGmTiZyQR9H@a804a"}},{"__type__":"cc.AnimationComponent","_name":"Cube<AnimationComponent>","node":{"__id__":4},"playOnLoad":true,"_clips":[{"__uuid__":"e7Q1E8siVM9qiF8hhQtQdP"},{"__uuid__":"6asjcTYLJGebOfPKruyQPJ"}],"_defaultClip":{"__uuid__":"e7Q1E8siVM9qiF8hhQtQdP"}},{"__type__":"14d46Brs+BKzphIcNfc3hHf","node":{"__id__":4}},{"__type__":"db193mr2BZHAquud+bjpZ13","node":{"__id__":4}}],"_id":"77iPi1fLRKG6qTYB+eahY+"},{"__type__":"cc.Node","_name":"Canvas","_parent":{"__id__":1},"_children":[{"__id__":6}],"_components":[{"__type__":"cc.UITransformComponent","node":{"__id__":5},"_contentSize":{"__type__":"cc.Size","width":960,"height":640}},{"__type__":"cc.CanvasComponent","node":{"__id__":5}}],"_lpos":{"__type__":"cc.Vec3","x":480,"y":320,"z":1},"_layer":33554432,"_id":"deRrSQg/ZD4o0MOZ0/kqQb"},{"__type__":"cc.Node","_name":"city","_parent":{"__id__":5},"_children":[{"__id__":7},{"__id__":14},{"__id__":37},{"__id__":40},{"__id__":41}],"_components":[{"__type__":"cc.UITransformComponent","_name":"city<UITransformComponent>","node":{"__id__":6},"_contentSize":{"__type__":"cc.Size","width":3000,"height":2048}},{"__type__":"eb158DqQqpK1I4wvTNaBgs4","_name":"city<SpritePicMove>","node":{"__id__":6}}],"_lpos":{"__type__":"cc.Vec3","x":88,"y":-52},"_layer":33554432},{"__type__":"cc.Node","_name":"map","_parent":{"__id__":6},"_children":[{"__id__":8},{"__id__":9},{"__id__":10},{"__id__":11},{"__id__":12},{"__id__":13}],"_components":[{"__type__":"cc.UITransformComponent","_name":"map<UITransformComponent>","node":{"__id__":7}}],"_lpos":{"__type__":"cc.Vec3","x":6.842999999999961,"y":-3.7900000000000205}},{"__type__":"cc.Node","_name":"ID_159","_parent":{"__id__":7},"_components":[{"__type__":"cc.UITransformComponent","node":{"__id__":8},"_contentSize":{"__type__":"cc.Size","width":1024,"height":1024}},{"__type__":"cc.SpriteComponent","node":{"__id__":8},"_spriteFrame":{"__uuid__":"d4hwbPXUdK9oXQ7esOw0tq@f9941"}}],"_lpos":{"__type__":"cc.Vec3","x":-988,"y":-512}},{"__type__":"cc.Node","_name":"ID_160","_parent":{"__id__":7},"_components":[{"__type__":"cc.UITransformComponent","node":{"__id__":9},"_contentSize":{"__type__":"cc.Size","width":1024,"height":1024}},{"__type__":"cc.SpriteComponent","node":{"__id__":9},"_spriteFrame":{"__uuid__":"201QujV3BEAK9K8X8LbiMv@f9941"}}],"_lpos":{"__type__":"cc.Vec3","x":36,"y":-512}},{"__type__":"cc.Node","_name":"ID_161","_parent":{"__id__":7},"_components":[{"__type__":"cc.UITransformComponent","node":{"__id__":10},"_contentSize":{"__type__":"cc.Size","width":952,"height":1024}},{"__type__":"cc.SpriteComponent","node":{"__id__":10},"_spriteFrame":{"__uuid__":"8dzGDc1k9Ik5spA60COD8I@f9941"}}],"_lpos":{"__type__":"cc.Vec3","x":1024,"y":-512}},{"__type__":"cc.Node","_name":"ID_162","_parent":{"__id__":7},"_components":[{"__type__":"cc.UITransformComponent","_name":"ID_162<UITransformComponent>","node":{"__id__":11},"_contentSize":{"__type__":"cc.Size","width":1024,"height":1024}},{"__type__":"cc.SpriteComponent","_name":"ID_162<SpriteComponent>","node":{"__id__":11},"_spriteFrame":{"__uuid__":"88pazViNRIurBWLEotR0Dl@f9941"}}],"_lpos":{"__type__":"cc.Vec3","x":-988,"y":512}},{"__type__":"cc.Node","_name":"ID_163","_parent":{"__id__":7},"_components":[{"__type__":"cc.UITransformComponent","node":{"__id__":12},"_contentSize":{"__type__":"cc.Size","width":1024,"height":1024}},{"__type__":"cc.SpriteComponent","node":{"__id__":12},"_spriteFrame":{"__uuid__":"0bLqDG8Q1Fn5uPPg5kUIFA@f9941"}}],"_lpos":{"__type__":"cc.Vec3","x":36,"y":512}},{"__type__":"cc.Node","_name":"ID_164","_parent":{"__id__":7},"_components":[{"__type__":"cc.UITransformComponent","node":{"__id__":13},"_contentSize":{"__type__":"cc.Size","width":952,"height":1024}},{"__type__":"cc.SpriteComponent","node":{"__id__":13},"_spriteFrame":{"__uuid__":"27vI70ltpGgo0oqWmq0qYX@f9941"}}],"_lpos":{"__type__":"cc.Vec3","x":1024,"y":512}},{"__type__":"cc.Node","_name":"building","_parent":{"__id__":6},"_children":[{"__id__":15},{"__id__":16},{"__id__":17},{"__id__":18},{"__id__":19},{"__id__":20},{"__id__":21},{"__id__":22},{"__id__":23},{"__id__":24},{"__id__":25},{"__id__":26},{"__id__":27},{"__id__":28},{"__id__":29},{"__id__":30},{"__id__":31},{"__id__":32},{"__id__":33},{"__id__":34},{"__id__":35},{"__id__":36}],"_components":[{"__type__":"cc.UITransformComponent","node":{"__id__":14}}],"_lpos":{"__type__":"cc.Vec3","x":6.842999999999961,"y":-3.7900000000000205}},{"__type__":"cc.Node","_name":"ID_355","_parent":{"__id__":14},"_components":[{"__type__":"cc.UITransformComponent","node":{"__id__":15},"_contentSize":{"__type__":"cc.Size","width":581,"height":381}},{"__type__":"cc.SpriteComponent","node":{"__id__":15},"_spriteFrame":{"__uuid__":"64CUU4ieBJj79DwJnIODbJ@f9941"}}],"_lpos":{"__type__":"cc.Vec3","x":-880,"y":547}},{"__type__":"cc.Node","_name":"ID_400","_parent":{"__id__":14},"_components":[{"__type__":"cc.UITransformComponent","node":{"__id__":16},"_contentSize":{"__type__":"cc.Size","width":179,"height":165}},{"__type__":"cc.SpriteComponent","node":{"__id__":16},"_spriteFrame":{"__uuid__":"7cbRE8rntI3ZEuYHQRig3a@f9941"}}],"_lpos":{"__type__":"cc.Vec3","x":-541,"y":633}},{"__type__":"cc.Node","_name":"ID_401","_parent":{"__id__":14},"_components":[{"__type__":"cc.UITransformComponent","node":{"__id__":17},"_contentSize":{"__type__":"cc.Size","width":200,"height":199}},{"__type__":"cc.SpriteComponent","node":{"__id__":17},"_spriteFrame":{"__uuid__":"044mLGRrhGzJxUntungBFa@f9941"}}],"_lpos":{"__type__":"cc.Vec3","x":-909,"y":255}},{"__type__":"cc.Node","_name":"ID_402","_parent":{"__id__":14},"_components":[{"__type__":"cc.UITransformComponent","node":{"__id__":18},"_contentSize":{"__type__":"cc.Size","width":225,"height":278}},{"__type__":"cc.SpriteComponent","node":{"__id__":18},"_spriteFrame":{"__uuid__":"c6f9xZKCpMnoZSVUnOPEPA@f9941"}}],"_lpos":{"__type__":"cc.Vec3","x":-472,"y":286}},{"__type__":"cc.Node","_name":"ID_403","_parent":{"__id__":14},"_components":[{"__type__":"cc.UITransformComponent","node":{"__id__":19},"_contentSize":{"__type__":"cc.Size","width":164,"height":193}},{"__type__":"cc.SpriteComponent","node":{"__id__":19},"_spriteFrame":{"__uuid__":"8dePWiBU5GGLqyMsX4X+DN@f9941"}}],"_lpos":{"__type__":"cc.Vec3","x":-1091,"y":191}},{"__type__":"cc.Node","_name":"ID_404","_parent":{"__id__":14},"_components":[{"__type__":"cc.UITransformComponent","node":{"__id__":20},"_contentSize":{"__type__":"cc.Size","width":202,"height":144}},{"__type__":"cc.SpriteComponent","node":{"__id__":20},"_spriteFrame":{"__uuid__":"8eDfi3zjBFhaou+0DnxHHA@f9941"}}],"_lpos":{"__type__":"cc.Vec3","x":-119,"y":349}},{"__type__":"cc.Node","_name":"ID_405","_parent":{"__id__":14},"_components":[{"__type__":"cc.UITransformComponent","node":{"__id__":21},"_contentSize":{"__type__":"cc.Size","width":216,"height":163}},{"__type__":"cc.SpriteComponent","node":{"__id__":21},"_spriteFrame":{"__uuid__":"03I92ZoOZNH7X8GNRtZKAg@f9941"}}],"_lpos":{"__type__":"cc.Vec3","x":65,"y":442}},{"__type__":"cc.Node","_name":"ID_406","_parent":{"__id__":14},"_components":[{"__type__":"cc.UITransformComponent","node":{"__id__":22},"_contentSize":{"__type__":"cc.Size","width":188,"height":116}},{"__type__":"cc.SpriteComponent","node":{"__id__":22},"_spriteFrame":{"__uuid__":"f6zdYmWNxGWpsMdwGDaf+5@f9941"}}],"_lpos":{"__type__":"cc.Vec3","x":-893.703,"y":-32}},{"__type__":"cc.Node","_name":"ID_407","_parent":{"__id__":14},"_components":[{"__type__":"cc.UITransformComponent","node":{"__id__":23},"_contentSize":{"__type__":"cc.Size","width":194,"height":143}},{"__type__":"cc.SpriteComponent","node":{"__id__":23},"_spriteFrame":{"__uuid__":"46KX23CexGs5h73dnDjmoA@f9941"}}],"_lpos":{"__type__":"cc.Vec3","x":-543,"y":-17}},{"__type__":"cc.Node","_name":"ID_408","_parent":{"__id__":14},"_components":[{"__type__":"cc.UITransformComponent","node":{"__id__":24},"_contentSize":{"__type__":"cc.Size","width":209,"height":206}},{"__type__":"cc.SpriteComponent","node":{"__id__":24},"_spriteFrame":{"__uuid__":"c9N8TrxYhA5YlqUZ5oVBJP@f9941"}}],"_lpos":{"__type__":"cc.Vec3","x":-717.129,"y":-80.276}},{"__type__":"cc.Node","_name":"ID_409","_parent":{"__id__":14},"_components":[{"__type__":"cc.UITransformComponent","node":{"__id__":25},"_contentSize":{"__type__":"cc.Size","width":276,"height":206}},{"__type__":"cc.SpriteComponent","node":{"__id__":25},"_spriteFrame":{"__uuid__":"2fwfBOTy9P6LhxVVuTv+ph@f9941"}}],"_lpos":{"__type__":"cc.Vec3","x":-802.757,"y":409.406}},{"__type__":"cc.Node","_name":"ID_410","_parent":{"__id__":14},"_components":[{"__type__":"cc.UITransformComponent","node":{"__id__":26},"_contentSize":{"__type__":"cc.Size","width":231,"height":177}},{"__type__":"cc.SpriteComponent","node":{"__id__":26},"_spriteFrame":{"__uuid__":"d2Wl1J4dtMar4L4/nDh8qK@f9941"}}],"_lpos":{"__type__":"cc.Vec3","x":-436.035,"y":-238.152}},{"__type__":"cc.Node","_name":"ID_411","_parent":{"__id__":14},"_components":[{"__type__":"cc.UITransformComponent","node":{"__id__":27},"_contentSize":{"__type__":"cc.Size","width":196,"height":145}},{"__type__":"cc.SpriteComponent","node":{"__id__":27},"_spriteFrame":{"__uuid__":"bacBHNJ1xLgrG5F/HZvGBA@f9941"}}],"_lpos":{"__type__":"cc.Vec3","x":219.654,"y":350.126}},{"__type__":"cc.Node","_name":"ID_412","_parent":{"__id__":14},"_components":[{"__type__":"cc.UITransformComponent","node":{"__id__":28},"_contentSize":{"__type__":"cc.Size","width":293,"height":143}},{"__type__":"cc.SpriteComponent","node":{"__id__":28},"_spriteFrame":{"__uuid__":"ddnNOIhwhGtaPBzpticILM@f9941"}}],"_lpos":{"__type__":"cc.Vec3","x":759.061,"y":-244.493}},{"__type__":"cc.Node","_name":"ID_413","_parent":{"__id__":14},"_components":[{"__type__":"cc.UITransformComponent","node":{"__id__":29},"_contentSize":{"__type__":"cc.Size","width":215,"height":128}},{"__type__":"cc.SpriteComponent","node":{"__id__":29},"_spriteFrame":{"__uuid__":"81KK16NplKxbH8X6UKQ8Mc@f9941"}}],"_lpos":{"__type__":"cc.Vec3","y":-686.833}},{"__type__":"cc.Node","_name":"ID_414","_parent":{"__id__":14},"_components":[{"__type__":"cc.UITransformComponent","node":{"__id__":30},"_contentSize":{"__type__":"cc.Size","width":167,"height":300}},{"__type__":"cc.SpriteComponent","node":{"__id__":30},"_spriteFrame":{"__uuid__":"52h8efNDlN1az3wq84FmLT@f9941"}}],"_lpos":{"__type__":"cc.Vec3","x":466,"y":301}},{"__type__":"cc.Node","_name":"ID_416","_parent":{"__id__":14},"_components":[{"__type__":"cc.UITransformComponent","node":{"__id__":31},"_contentSize":{"__type__":"cc.Size","width":236,"height":167}},{"__type__":"cc.SpriteComponent","node":{"__id__":31},"_spriteFrame":{"__uuid__":"c70N3xyl5En4QjEqjt6tia@f9941"}}],"_lpos":{"__type__":"cc.Vec3","x":471.958,"y":214.875}},{"__type__":"cc.Node","_name":"ID_417","_parent":{"__id__":14},"_components":[{"__type__":"cc.UITransformComponent","node":{"__id__":32},"_contentSize":{"__type__":"cc.Size","width":178,"height":96}},{"__type__":"cc.SpriteComponent","node":{"__id__":32},"_spriteFrame":{"__uuid__":"1b+CivlyNG+IL3HR9LyFm7@f9941"}}],"_lpos":{"__type__":"cc.Vec3","x":314,"y":-512}},{"__type__":"cc.Node","_name":"ID_418","_parent":{"__id__":14},"_components":[{"__type__":"cc.UITransformComponent","node":{"__id__":33},"_contentSize":{"__type__":"cc.Size","width":176,"height":114}},{"__type__":"cc.SpriteComponent","node":{"__id__":33},"_spriteFrame":{"__uuid__":"85FXoDuVRMMJs45VvuPhCf@f9941"}}],"_lpos":{"__type__":"cc.Vec3","x":900.647,"y":-82.164}},{"__type__":"cc.Node","_name":"ID_419","_parent":{"__id__":14},"_components":[{"__type__":"cc.UITransformComponent","node":{"__id__":34},"_contentSize":{"__type__":"cc.Size","width":177,"height":107}},{"__type__":"cc.SpriteComponent","node":{"__id__":34},"_spriteFrame":{"__uuid__":"2b7zrADGhFDpItIFMp0D7D@f9941"}}],"_lpos":{"__type__":"cc.Vec3","x":609.911,"y":-647.834}},{"__type__":"cc.Node","_name":"ID_422","_parent":{"__id__":14},"_components":[{"__type__":"cc.UITransformComponent","node":{"__id__":35},"_contentSize":{"__type__":"cc.Size","width":176,"height":100}},{"__type__":"cc.SpriteComponent","node":{"__id__":35},"_spriteFrame":{"__uuid__":"2epJRL+ChAlq44Nf26OGnX@f9941"}}],"_lpos":{"__type__":"cc.Vec3","x":960.69,"y":-382.38}},{"__type__":"cc.Node","_name":"ID_913","_parent":{"__id__":14},"_components":[{"__type__":"cc.UITransformComponent","node":{"__id__":36},"_contentSize":{"__type__":"cc.Size","width":110,"height":136}},{"__type__":"cc.SpriteComponent","node":{"__id__":36},"_spriteFrame":{"__uuid__":"64bpcSqbVBvqwLDzOsH8TS@f9941"}}],"_lpos":{"__type__":"cc.Vec3","x":17,"y":291}},{"__type__":"cc.Node","_name":"prisoner","_parent":{"__id__":6},"_children":[{"__id__":38},{"__id__":39}],"_components":[{"__type__":"cc.UITransformComponent","node":{"__id__":37}}],"_lpos":{"__type__":"cc.Vec3","x":23.84299999999996,"y":287.21000000000004}},{"__type__":"cc.Node","_name":"1L1","_parent":{"__id__":37},"_components":[{"__type__":"cc.UITransformComponent","node":{"__id__":38},"_contentSize":{"__type__":"cc.Size","width":38,"height":45}},{"__type__":"cc.SpriteComponent","node":{"__id__":38},"_spriteFrame":{"__uuid__":"45p6t9kFJPq7Ilv469TQNI@25e08"}},{"__type__":"cc.AnimationComponent","_name":"1L1<AnimationComponent>","node":{"__id__":38},"playOnLoad":true,"_clips":[{"__uuid__":"0f0eJYN3BNgoUs1gt09ArQ"}],"_defaultClip":{"__uuid__":"0f0eJYN3BNgoUs1gt09ArQ"}}],"_lpos":{"__type__":"cc.Vec3","x":80.44,"y":-41.49},"_layer":33554432},{"__type__":"cc.Node","_name":"2R1","_parent":{"__id__":37},"_components":[{"__type__":"cc.UITransformComponent","node":{"__id__":39},"_contentSize":{"__type__":"cc.Size","width":35,"height":52}},{"__type__":"cc.SpriteComponent","node":{"__id__":39},"_spriteFrame":{"__uuid__":"45p6t9kFJPq7Ilv469TQNI@86103"}},{"__type__":"cc.AnimationComponent","_name":"2R1<AnimationComponent>","node":{"__id__":39},"playOnLoad":true,"_clips":[{"__uuid__":"d4jY5r7d9Oi4bRNyWMUMlA"}],"_defaultClip":{"__uuid__":"d4jY5r7d9Oi4bRNyWMUMlA"}}],"_lpos":{"__type__":"cc.Vec3","x":34.717,"y":-79.594},"_layer":33554432},{"__type__":"cc.Node","_name":"water","_parent":{"__id__":6},"_components":[{"__type__":"cc.UITransformComponent","node":{"__id__":40},"_contentSize":{"__type__":"cc.Size","width":74,"height":56}},{"__type__":"cc.SpriteComponent","node":{"__id__":40},"_spriteFrame":{"__uuid__":"b5h8z9ITpNdZQo63NvSVvV@bd83f"}},{"__type__":"cc.AnimationComponent","node":{"__id__":40},"playOnLoad":true,"_clips":[{"__uuid__":"7eRCWYIohGcru2QaEVeaOD"}],"_defaultClip":{"__uuid__":"7eRCWYIohGcru2QaEVeaOD"}}],"_lpos":{"__type__":"cc.Vec3","x":-226.05700000000002,"y":80.31},"_layer":33554432},{"__type__":"cc.Node","_name":"Label","_parent":{"__id__":6},"_components":[{"__type__":"cc.UITransformComponent","node":{"__id__":41},"_contentSize":{"__type__":"cc.Size","width":75,"height":50.4}},{"__type__":"cc.LabelComponent","node":{"__id__":41},"_string":"竞技场","_actualFontSize":25,"_fontSize":25}],"_lpos":{"__type__":"cc.Vec3","x":-485.06,"y":339.395,"z":257.401},"_lrot":{"__type__":"cc.Quat","x":-0.0009687318624587367,"y":0.28681294733428214,"z":0.14872991924441695,"w":0.9463703323337805},"_lscale":{"__type__":"cc.Vec3","x":1,"y":1.2,"z":1},"_layer":33554432,"_euler":{"__type__":"cc.Vec3","x":-5.210000000000001,"y":34.46800000000001,"z":16.317}}],{"__type__":"cc.SpriteFrame","content":{"name":"ID_160","rect":{"x":0,"y":0,"width":1024,"height":1024},"offset":{"x":0,"y":0},"originalSize":{"width":1024,"height":1024},"rotated":false,"capInsets":[0,0,0,0],"texture":"201QujV3BEAK9K8X8LbiMv@6c48a"}},{"__type__":"cc.SpriteFrame","content":{"name":"ID_164","rect":{"x":0,"y":0,"width":952,"height":1024},"offset":{"x":0,"y":0},"originalSize":{"width":952,"height":1024},"rotated":false,"capInsets":[0,0,0,0],"texture":"27vI70ltpGgo0oqWmq0qYX@6c48a"}},{"__type__":"cc.SpriteFrame","content":{"name":"1R4","rect":{"x":138,"y":84,"width":39,"height":44},"offset":{"x":106,"y":-9},"originalSize":{"width":297,"height":72},"rotated":true,"capInsets":[0,0,0,0],"texture":"cbo6U03BhEe7qPMaryh/pI@6c48a"}},{"__type__":"cc.SpriteFrame","content":{"name":"1R1","rect":{"x":200,"y":2,"width":23,"height":50},"offset":{"x":-115,"y":-3},"originalSize":{"width":297,"height":72},"rotated":true,"capInsets":[0,0,0,0],"texture":"cbo6U03BhEe7qPMaryh/pI@6c48a"}},{"__type__":"cc.SpriteFrame","content":{"name":"1R2","rect":{"x":178,"y":28,"width":39,"height":44},"offset":{"x":-34,"y":-6},"originalSize":{"width":297,"height":72},"rotated":false,"capInsets":[0,0,0,0],"texture":"cbo6U03BhEe7qPMaryh/pI@6c48a"}},{"__type__":"cc.SpriteFrame","content":{"name":"1R3","rect":{"x":2,"y":52,"width":47,"height":44},"offset":{"x":40,"y":-9},"originalSize":{"width":297,"height":72},"rotated":true,"capInsets":[0,0,0,0],"texture":"cbo6U03BhEe7qPMaryh/pI@6c48a"}},{"__type__":"cc.SpriteFrame","content":{"name":"1L1","rect":{"x":219,"y":27,"width":38,"height":45},"offset":{"x":89,"y":-4},"originalSize":{"width":290,"height":85},"rotated":false,"capInsets":[0,0,0,0],"texture":"cbo6U03BhEe7qPMaryh/pI@6c48a"}},{"__type__":"cc.SpriteFrame","content":{"name":"2R3","rect":{"x":224,"y":74,"width":40,"height":42},"offset":{"x":44,"y":-11},"originalSize":{"width":348,"height":82},"rotated":false,"capInsets":[0,0,0,0],"texture":"cbo6U03BhEe7qPMaryh/pI@6c48a"}},{"__type__":"cc.SpriteFrame","content":{"name":"1L4","rect":{"x":147,"y":2,"width":24,"height":51},"offset":{"x":-110,"y":2},"originalSize":{"width":290,"height":85},"rotated":true,"capInsets":[0,0,0,0],"texture":"cbo6U03BhEe7qPMaryh/pI@6c48a"}},{"__type__":"cc.SpriteFrame","content":{"name":"2L2","rect":{"x":2,"y":101,"width":21,"height":66},"offset":{"x":-45,"y":3},"originalSize":{"width":325,"height":86},"rotated":true,"capInsets":[0,0,0,0],"texture":"cbo6U03BhEe7qPMaryh/pI@6c48a"}},{"__type__":"cc.SpriteFrame","content":{"name":"1L3","rect":{"x":184,"y":74,"width":38,"height":45},"offset":{"x":-51,"y":-1},"originalSize":{"width":290,"height":85},"rotated":false,"capInsets":[0,0,0,0],"texture":"cbo6U03BhEe7qPMaryh/pI@6c48a"}},{"__type__":"cc.SpriteFrame","content":{"name":"2L1","rect":{"x":98,"y":40,"width":35,"height":52},"offset":{"x":-122,"y":-4},"originalSize":{"width":325,"height":86},"rotated":false,"capInsets":[0,0,0,0],"texture":"cbo6U03BhEe7qPMaryh/pI@6c48a"}},{"__type__":"cc.SpriteFrame","content":{"name":"1L2","rect":{"x":2,"y":2,"width":48,"height":45},"offset":{"x":14,"y":-4},"originalSize":{"width":290,"height":85},"rotated":true,"capInsets":[0,0,0,0],"texture":"cbo6U03BhEe7qPMaryh/pI@6c48a"}},{"__type__":"cc.SpriteFrame","content":{"name":"2R4","rect":{"x":48,"y":52,"width":48,"height":42},"offset":{"x":132,"y":-11},"originalSize":{"width":348,"height":82},"rotated":false,"capInsets":[0,0,0,0],"texture":"cbo6U03BhEe7qPMaryh/pI@6c48a"}},{"__type__":"cc.SpriteFrame","content":{"name":"2R1","rect":{"x":93,"y":2,"width":36,"height":52},"offset":{"x":-144,"y":-6},"originalSize":{"width":348,"height":82},"rotated":true,"capInsets":[0,0,0,0],"texture":"cbo6U03BhEe7qPMaryh/pI@6c48a"}},{"__type__":"cc.SpriteFrame","content":{"name":"2L3","rect":{"x":135,"y":40,"width":41,"height":42},"offset":{"x":30,"y":-9},"originalSize":{"width":325,"height":86},"rotated":false,"capInsets":[0,0,0,0],"texture":"cbo6U03BhEe7qPMaryh/pI@6c48a"}},{"__type__":"cc.SpriteFrame","content":{"name":"2R2","rect":{"x":70,"y":96,"width":20,"height":66},"offset":{"x":-51,"y":1},"originalSize":{"width":348,"height":82},"rotated":true,"capInsets":[0,0,0,0],"texture":"cbo6U03BhEe7qPMaryh/pI@6c48a"}},{"__type__":"cc.SpriteFrame","content":{"name":"2L4","rect":{"x":49,"y":2,"width":47,"height":42},"offset":{"x":112,"y":-9},"originalSize":{"width":325,"height":86},"rotated":true,"capInsets":[0,0,0,0],"texture":"cbo6U03BhEe7qPMaryh/pI@6c48a"}},{"__type__":"cc.SpriteFrame","content":{"name":"ID_162","rect":{"x":0,"y":0,"width":1024,"height":1024},"offset":{"x":0,"y":0},"originalSize":{"width":1024,"height":1024},"rotated":false,"capInsets":[0,0,0,0],"texture":"88pazViNRIurBWLEotR0Dl@6c48a"}},{"__type__":"cc.SpriteFrame","content":{"name":"ID_405","rect":{"x":38,"y":0,"width":216,"height":163},"offset":{"x":18,"y":2.5},"originalSize":{"width":256,"height":168},"rotated":false,"capInsets":[0,0,0,0],"texture":"03I92ZoOZNH7X8GNRtZKAg@6c48a"}},{"__type__":"cc.SpriteFrame","content":{"name":"ID_913","rect":{"x":119,"y":0,"width":110,"height":136},"offset":{"x":56,"y":6},"originalSize":{"width":236,"height":148},"rotated":false,"capInsets":[0,0,0,0],"texture":"64bpcSqbVBvqwLDzOsH8TS@6c48a"}},{"__type__":"cc.Mesh","_native":".bin","_struct":{"primitives":[{"primitiveMode":7,"vertexBundelIndices":[0],"indexView":{"offset":1152,"length":72,"count":36,"stride":2}}],"vertexBundles":[{"view":{"offset":0,"length":1152,"count":24,"stride":48},"attributes":[{"name":"a_position","format":32,"isNormalized":false},{"name":"a_normal","format":32,"isNormalized":false},{"name":"a_texCoord","format":21,"isNormalized":false},{"name":"a_tangent","format":43,"isNormalized":false}]}],"minPosition":{"__type__":"cc.Vec3","x":-0.5,"y":-0.5,"z":-0.5},"maxPosition":{"__type__":"cc.Vec3","x":0.5,"y":0.5,"z":0.5}},"_dataLength":1224,"_hash":2480046122},{"__type__":"cc.SpriteFrame","content":{"name":"ID_414","rect":{"x":125,"y":3,"width":167,"height":300},"offset":{"x":61.5,"y":1},"originalSize":{"width":294,"height":308},"rotated":false,"capInsets":[0,0,0,0],"texture":"52h8efNDlN1az3wq84FmLT@6c48a"}},{"__type__":"cc.SpriteFrame","content":{"name":"ID_413","rect":{"x":34,"y":3,"width":215,"height":128},"offset":{"x":16,"y":2.5},"originalSize":{"width":251,"height":139},"rotated":false,"capInsets":[0,0,0,0],"texture":"81KK16NplKxbH8X6UKQ8Mc@6c48a"}},{"__type__":"cc.SpriteFrame","content":{"name":"ID_407","rect":{"x":66,"y":3,"width":194,"height":143},"offset":{"x":32,"y":1.5},"originalSize":{"width":262,"height":152},"rotated":false,"capInsets":[0,0,0,0],"texture":"46KX23CexGs5h73dnDjmoA@6c48a"}},{"__type__":"cc.SpriteFrame","content":{"name":"ID_418","rect":{"x":0,"y":3,"width":176,"height":114},"offset":{"x":-1.5,"y":13.5},"originalSize":{"width":179,"height":147},"rotated":false,"capInsets":[0,0,0,0],"texture":"85FXoDuVRMMJs45VvuPhCf@6c48a"}},{"__type__":"cc.SpriteFrame","content":{"name":"ID_355","rect":{"x":0,"y":2,"width":581,"height":381},"offset":{"x":-1,"y":0},"originalSize":{"width":583,"height":385},"rotated":false,"capInsets":[0,0,0,0],"texture":"64CUU4ieBJj79DwJnIODbJ@6c48a"}},{"__type__":"cc.SpriteFrame","content":{"name":"wt0308","rect":{"x":306,"y":2,"width":74,"height":56},"offset":{"x":-12,"y":-1},"originalSize":{"width":960,"height":540},"rotated":false,"capInsets":[0,0,0,0],"texture":"23D9TZukBHT4ZNxTQYs0bc@6c48a"}},{"__type__":"cc.SpriteFrame","content":{"name":"wt0304","rect":{"x":382,"y":2,"width":74,"height":56},"offset":{"x":-12,"y":-1},"originalSize":{"width":960,"height":540},"rotated":false,"capInsets":[0,0,0,0],"texture":"23D9TZukBHT4ZNxTQYs0bc@6c48a"}},{"__type__":"cc.SpriteFrame","content":{"name":"wt0312","rect":{"x":230,"y":2,"width":74,"height":56},"offset":{"x":-12,"y":-1},"originalSize":{"width":960,"height":540},"rotated":false,"capInsets":[0,0,0,0],"texture":"23D9TZukBHT4ZNxTQYs0bc@6c48a"}},{"__type__":"cc.SpriteFrame","content":{"name":"wt0316","rect":{"x":154,"y":2,"width":74,"height":56},"offset":{"x":-12,"y":-1},"originalSize":{"width":960,"height":540},"rotated":false,"capInsets":[0,0,0,0],"texture":"23D9TZukBHT4ZNxTQYs0bc@6c48a"}},{"__type__":"cc.SpriteFrame","content":{"name":"wt0332","rect":{"x":686,"y":2,"width":74,"height":54},"offset":{"x":-12,"y":-1},"originalSize":{"width":960,"height":540},"rotated":false,"capInsets":[0,0,0,0],"texture":"23D9TZukBHT4ZNxTQYs0bc@6c48a"}},{"__type__":"cc.SpriteFrame","content":{"name":"wt0340","rect":{"x":534,"y":2,"width":74,"height":54},"offset":{"x":-13,"y":-1},"originalSize":{"width":960,"height":540},"rotated":false,"capInsets":[0,0,0,0],"texture":"23D9TZukBHT4ZNxTQYs0bc@6c48a"}},{"__type__":"cc.SpriteFrame","content":{"name":"wt0328","rect":{"x":2,"y":2,"width":74,"height":56},"offset":{"x":-12,"y":-1},"originalSize":{"width":960,"height":540},"rotated":false,"capInsets":[0,0,0,0],"texture":"23D9TZukBHT4ZNxTQYs0bc@6c48a"}},{"__type__":"cc.SpriteFrame","content":{"name":"wt0300","rect":{"x":458,"y":2,"width":74,"height":56},"offset":{"x":-12,"y":0},"originalSize":{"width":960,"height":540},"rotated":false,"capInsets":[0,0,0,0],"texture":"23D9TZukBHT4ZNxTQYs0bc@6c48a"}},{"__type__":"cc.SpriteFrame","content":{"name":"wt0324","rect":{"x":762,"y":2,"width":74,"height":54},"offset":{"x":-12,"y":-1},"originalSize":{"width":960,"height":540},"rotated":false,"capInsets":[0,0,0,0],"texture":"23D9TZukBHT4ZNxTQYs0bc@6c48a"}},{"__type__":"cc.SpriteFrame","content":{"name":"wt0320","rect":{"x":78,"y":2,"width":74,"height":56},"offset":{"x":-12,"y":-1},"originalSize":{"width":960,"height":540},"rotated":false,"capInsets":[0,0,0,0],"texture":"23D9TZukBHT4ZNxTQYs0bc@6c48a"}},{"__type__":"cc.SpriteFrame","content":{"name":"wt0336","rect":{"x":610,"y":2,"width":74,"height":54},"offset":{"x":-12,"y":-1},"originalSize":{"width":960,"height":540},"rotated":false,"capInsets":[0,0,0,0],"texture":"23D9TZukBHT4ZNxTQYs0bc@6c48a"}},{"__type__":"cc.SpriteFrame","content":{"name":"ID_411","rect":{"x":95,"y":0,"width":196,"height":145},"offset":{"x":46,"y":2.5},"originalSize":{"width":294,"height":150},"rotated":false,"capInsets":[0,0,0,0],"texture":"bacBHNJ1xLgrG5F/HZvGBA@6c48a"}},{"__type__":"cc.SpriteFrame","content":{"name":"ID_416","rect":{"x":23,"y":0,"width":236,"height":167},"offset":{"x":9,"y":4.5},"originalSize":{"width":264,"height":176},"rotated":false,"capInsets":[0,0,0,0],"texture":"c70N3xyl5En4QjEqjt6tia@6c48a"}},{"__type__":"cc.SpriteFrame","content":{"name":"ID_402","rect":{"x":119,"y":0,"width":225,"height":278},"offset":{"x":58.5,"y":20},"originalSize":{"width":346,"height":318},"rotated":false,"capInsets":[0,0,0,0],"texture":"c6f9xZKCpMnoZSVUnOPEPA@6c48a"}},{"__type__":"cc.SpriteFrame","content":{"name":"ID_408","rect":{"x":61,"y":11,"width":209,"height":206},"offset":{"x":26.5,"y":3.5},"originalSize":{"width":278,"height":235},"rotated":false,"capInsets":[0,0,0,0],"texture":"c9N8TrxYhA5YlqUZ5oVBJP@6c48a"}},{"__type__":"cc.Material","_effectAsset":{"__uuid__":"1brw/JvvpFnIvdrxpFCgMZ"},"_defines":[{}]},{"__type__":"cc.SpriteFrame","content":{"name":"ID_410","rect":{"x":83,"y":3,"width":231,"height":177},"offset":{"x":40.5,"y":-1.5},"originalSize":{"width":316,"height":180},"rotated":false,"capInsets":[0,0,0,0],"texture":"d2Wl1J4dtMar4L4/nDh8qK@6c48a"}},{"__type__":"cc.AnimationClip","_name":"soldiers-001","wrapMode":2,"_duration":2.1333333333333333,"_keys":[[0.95,1.1166666666666667,1.2833333333333334,1.45,1.6166666666666667,1.7833333333333334,1.95,2.1166666666666667]],"_curves":[{"modifiers":[{"__type__":"cc.animation.ComponentPath","component":"cc.SpriteComponent"},"spriteFrame"],"data":{"keys":0,"values":[{"__uuid__":"45p6t9kFJPq7Ilv469TQNI@86103"},{"__uuid__":"45p6t9kFJPq7Ilv469TQNI@29309"},{"__uuid__":"45p6t9kFJPq7Ilv469TQNI@c8e6f"},{"__uuid__":"45p6t9kFJPq7Ilv469TQNI@e8aec"},{"__uuid__":"45p6t9kFJPq7Ilv469TQNI@befef"},{"__uuid__":"45p6t9kFJPq7Ilv469TQNI@cb6fe"},{"__uuid__":"45p6t9kFJPq7Ilv469TQNI@66b73"},{"__uuid__":"45p6t9kFJPq7Ilv469TQNI@a2859"}],"easingMethods":{}}}],"_hash":989200170},{"__type__":"cc.SpriteFrame","content":{"name":"ID_159","rect":{"x":0,"y":0,"width":1024,"height":1024},"offset":{"x":0,"y":0},"originalSize":{"width":1024,"height":1024},"rotated":false,"capInsets":[0,0,0,0],"texture":"d4hwbPXUdK9oXQ7esOw0tq@6c48a"}},{"__type__":"cc.SpriteFrame","content":{"name":"ID_412","rect":{"x":28,"y":11,"width":293,"height":143},"offset":{"x":7.5,"y":-3.5},"originalSize":{"width":334,"height":158},"rotated":false,"capInsets":[0,0,0,0],"texture":"ddnNOIhwhGtaPBzpticILM@6c48a"}},{"__type__":"cc.AnimationClip","_name":"show","events":[{"frame":0.2,"func":"receiveString","params":["foo"]},{"frame":0.8666666666666667,"func":"receiveString","params":["foo"]}],"_duration":0.36666666666666664,"_keys":[[0,0.2,0.36666666666666664]],"_curves":[{"modifiers":["position"],"data":{"keys":0,"values":[{"__type__":"cc.Vec3"},{"__type__":"cc.Vec3","y":1},{"__type__":"cc.Vec3","y":1}],"easingMethods":{}}}],"_hash":3271241215},{"__type__":"cc.SpriteFrame","content":{"name":"ID_406","rect":{"x":23,"y":7,"width":188,"height":116},"offset":{"x":10,"y":-2},"originalSize":{"width":214,"height":126},"rotated":false,"capInsets":[0,0,0,0],"texture":"f6zdYmWNxGWpsMdwGDaf+5@6c48a"}}]
